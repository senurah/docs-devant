{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.\u00a0</p>"},{"location":"what-is-devant/","title":"What is Devant?","text":"<p>Devant is a powerful IPaaS with first-class AI support. Incorporate AI agents into the integrations you build in low-code and pro-code, and move away from siloed systems to intelligent digital experiences with Devant by WSO2\u2014the AI iPaaS that your AI Agents can call \u201chome\u201d.</p>"},{"location":"what-is-devant/#key-capabilities-of-devant","title":"Key capabilities of Devant","text":""},{"location":"what-is-devant/#efficient-and-effective-development","title":"Efficient and effective development","text":"<ul> <li>AI-Assisted Development: Devant includes a developer friendly VS Code-based editor with an integrated AI copilot, which aids developers at every stage, from code generation to refactoring.</li> <li>Unified Low-Code and Pro-Code Development: Allows seamless transitions between low-code and pro-code development with WSO2 Integrator: BI and WSO2 Integrator: MI, accommodating a diverse range of developer skills and preferences.</li> <li>Comprehensive Protocol and AI Support: Built-in capabilities to integrate with third-party AI services, vector databases, and support for protocols such as TCP, UDP, FILE, Websub, and Websubhub.</li> <li>Developer-Centric Design: Tools and workflows tailored specifically for integration developers, enhancing debugging, testing, and issue identification.</li> <li>Git Repository Integration: Effortlessly connect to Git-based platforms like GitHub, Bitbucket, or GitLab to develop components by linking an existing repository.</li> </ul>"},{"location":"what-is-devant/#seamless-deployment","title":"Seamless deployment","text":"<ul> <li>CI/CD: Eliminate manual builds and unreliable deployments with Devant's industry-standard CI/CD tooling, providing complete control and flexibility.</li> <li>Multi-Cloud Kubernetes: Easily deliver cloud-native applications across Azure, AWS, GCP, or your Kubernetes clusters.</li> <li>Configuration Management: Centralize configuration parameters, sensitive credentials, and secrets across deployment environments via an intuitive interface.</li> </ul>"},{"location":"what-is-devant/#effortless-management-of-apis-integrations-microservices-and-web-applications","title":"Effortless management of APIs, integrations, microservices, and web applications","text":"<ul> <li>Enable Security: Empower security teams to manage data flows, ensuring seamless control over sensitive information like access credentials.</li> <li>Scale Up or Down: Kubernetes handles scaling automatically, optimizing costs by scaling services based on demand.</li> <li>Ensure Reliability: DevOps and SRE teams can easily manage deployed components with built-in insights and observability.</li> </ul>"},{"location":"what-is-devant/#reusable-digital-assets","title":"Reusable digital assets","text":"<ul> <li>Control Visibility and Sharing: Publish your digital assets to a shared marketplace for consumption by internal or external stakeholders, managed by role-based access control.</li> <li>Internal Marketplace: Devant's secure internal marketplace fosters transparency and efficiency with granular access control for publishers and consumers.</li> </ul>"},{"location":"what-is-devant/#comprehensive-observability","title":"Comprehensive observability","text":"<ul> <li>Anomaly Detection: Stay ahead of issues with prompt notifications, ensuring balanced scaling and immediate action during unexpected mishaps.</li> <li>Troubleshoot and Debug: Quickly pinpoint and address root causes using detailed logs and data aligned in the same timeline, down to the machine-level details.</li> </ul>"},{"location":"what-is-devant/#robust-governance","title":"Robust governance","text":"<ul> <li>DORA Metrics: Monitor your DevOps efficiency with Devant DORA metrics, experiencing rapid improvements in time from deployment to production safely and robustly.</li> <li>Engineering Insights: Gain visibility into engineering insights and advanced data analytics to make data-driven decisions, optimize processes, and improve efficiency.</li> <li>API Analytics: Understand API performance and adoption patterns to identify and resolve operational bottlenecks.</li> </ul> <p>Devant is your all-in-one AI-capable platform for building, deploying, and managing integrations with ease, security, and efficiency.</p>"},{"location":"administer/inviting-members/","title":"Inviting members","text":""},{"location":"administer/inviting-members/#inviting-users","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access its resources.</p>"},{"location":"ai/deploy-your-first-ai-agent/","title":"Deploy Your First AI Agent","text":""},{"location":"ai/deploy-your-first-ai-agent/#overview","title":"Overview","text":"<p>In this guide, you will:</p> <ul> <li>Create a simple AI agent that provides math tutoring assistance.</li> <li>Use WSO2 Integrator: BI to develop the AI agent integration.</li> <li>Push the AI agent to Devant from WSO2 Integrator: BI. This will automatically build and deploy it to the development environment.</li> <li>Test the AI agent by sending prompts.</li> <li>Once verified, promote it to the production environment and expose it as an API.</li> </ul>"},{"location":"ai/deploy-your-first-ai-agent/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub account: Create a GitHub account if you don't have one already.</li> <li>If signing in to Devant for the first time, create an organization to begin with.</li> <li>VS Code: Install VS Code if you don't have it installed already.</li> </ol>"},{"location":"ai/deploy-your-first-ai-agent/#step-1-create-the-new-integration","title":"Step 1: Create the new integration","text":"<ol> <li>Attach a new repository to beign your integration. Refer Attach a Repository for more details.</li> <li>Select the Technology as <code>WSO2 Integrator: BI</code>.</li> <li>Choose the Integration Type as <code>AI Agent</code> and click Create.</li> </ol> <p>This redirects you to the Create New Integration in VS Code page. </p>"},{"location":"ai/deploy-your-first-ai-agent/#step-2-install-the-wso2-integrator-bi-extension-and-open-the-integration","title":"Step 2: Install the WSO2 Integrator: BI extension and open the integration","text":"<ol> <li>Intall WSO2 Integrator: BI extension. Refer Install and Set Up WSO2 Integrator: BI for more details.</li> <li>Click Develop in WSO2 Integrator: BI. This will clone your integration project and open it in BI.</li> </ol>"},{"location":"ai/deploy-your-first-ai-agent/#step-3-develop-the-ai-agent-in-wso2-integrator-bi","title":"Step 3: Develop the AI Agent in WSO2 Integrator: BI","text":"<p>To build your AI Agent using WSO2 Integrator: BI, refer to the AI Agent Integration guide on the Learn page.</p>"},{"location":"ai/deploy-your-first-ai-agent/#step-4-push-to-devant","title":"Step 4: Push to Devant","text":"<ol> <li>Click the Source Control icon on the sidebar.</li> <li>Click + to stage all changes.</li> <li>Add an appropriate commit message and commit.</li> <li>Click Sync Changes to push the changes to remote.</li> <li>Go back to the Design view using the back arrow in the top left corner.</li> <li>From the right side panel, click the View in Devant to view this integration in Devant.</li> </ol>"},{"location":"ai/deploy-your-first-ai-agent/#step-5-test-ai-agent","title":"Step 5: Test AI Agent","text":"<ol> <li> <p>Once you push the changes, the overview page of the Devant AI Agent will automatically refresh and show you the Latest Commit and automatically build and show the Build Status.</p> <p>Note</p> <p>The build process may take some time. Once complete, the build status changes to Success. You can see the Build History by clicking Build in the left navigation.</p> </li> <li> <p>Once the Build Status shows <code>Build completed</code>, it will be automatically deployed into the development card.</p> </li> <li>Then, click the Configure to Continue button, enter the configurable values, and click <code>Apply</code>.</li> <li> <p>Send the prompt <code>What is 87,657 * 67,997</code> to test your Math Tutor agent. Even though typically, LLMs are bad at large multiplication, this agent has tool support to give an accurate answer.</p> <p></p> </li> <li> <p>After successfully testing, you can promote your AI Agent to production by clicking the Promote button.</p> </li> <li>Once deployed to production, you can access your AI Agent through the API endpoints and embed it in your applications.</li> </ol>"},{"location":"ai/rag-application/","title":"RAG Application","text":""},{"location":"ai/rag-application/#introduction","title":"Introduction","text":"<p>Retrieval-Augmented Generation (RAG) is an AI framework that improves how Large Language Models (LLMs) answer questions by giving them access to additional, relevant information.</p> <p>RAG works through two main processes, which are ingestion and retrieval.</p>"},{"location":"ai/rag-application/#rag-ingestion","title":"RAG ingestion","text":"<p>To make use of RAG effectively, data must be systematically ingested into vector databases. This process, known as RAG Ingestion, involves setting up a vector database, utilizing embedding models, processing source files and chunking data. Devant offers a platform to efficiently ingest and manage unstructured documents for RAG. This guide walks through the key steps of RAG Ingestion in Devant.</p> <p>Go to your Organization by selecting the organization from the Organization dropdown in the top left corner. Select RAG Ingestion from the Admin dropdown at the bottom of the left navigation. </p>"},{"location":"ai/rag-application/#step-1-initialize-vector-store","title":"Step 1: Initialize Vector Store","text":"<p>LLMs receive contextual information as numerical vectors (embeddings). A vector database stores these embeddings for efficient retrieval. Devant supports a wide range of vector databases like Pinecone, Weaviate, Chroma, and so on. </p> <ol> <li>Select <code>Pinecone</code> as the vector database.</li> <li> <p>Enter the API key in the API Key field.</p> Info<p>To create an API key, refer to the Pinecone API Key documentation.</p> </li> <li> <p>Enter the Collection Name. The collection will be automatically created if it does not exist.</p> </li> <li>Click Next.</li> </ol>"},{"location":"ai/rag-application/#step-2-configure-the-embedding-model","title":"Step 2: Configure the Embedding Model","text":"<ol> <li>Select <code>text-embedding-ada-002</code> embedding model from the Open AI dropdown.</li> <li> <p>Enter the API key in the Embedding Model API Key field.</p> Info<p>To create an API key, refer to the OpenAI Platform documentation.</p> </li> <li> <p>Click Next.</p> </li> </ol>"},{"location":"ai/rag-application/#step-3-configure-chunking","title":"Step 3: Configure Chunking","text":"<p>Chunking is used to break large documents into manageable parts because processing them all at once is not feasible. Chunking strategy, Max segment size, and Max overlap size are automatically populated with default values. You can modify them if needed.</p> Info<ul> <li>Chunking strategy defines how text is split into smaller, manageable pieces (chunks).</li> <li>Max segment size determines the maximum length of tokens for each chunk.</li> <li>Max overlap size defines how many tokens repeat between consecutive chunks.</li> </ul>"},{"location":"ai/rag-application/#step-4-upload-source-files","title":"Step 4: Upload Source Files","text":"<p>Next, upload your source files (e.g., PDFs, CSVs, or text documents) for processing.</p> <ol> <li>Click Select Files. This will open the file explorer on your local machine.</li> <li>Select the files you want to upload.</li> <li> <p>Click Upload.</p> <p>Note</p> <p>When you click Upload it will generate embeddings for the uploaded files and store them in the vector database.</p> </li> </ol>"},{"location":"ai/rag-application/#step-5-verify","title":"Step 5: Verify","text":"<p>Once processing is complete, execute test queries to ensure proper data retrieval.</p> <ol> <li>Enter a query according to the content of the files uploaded in the previous step in the  Query field.</li> <li> <p>Maximum chunks to retrieve and Minimum similarity threshold are automatically populated with default values. You can modify them if needed.</p> Info<ul> <li>Maximum chunks to retrieve defines the number of matching chunks to retrieve against the query.</li> <li>Minimum similarity threshold determines whether a chunk is relevant enough to be considered a match for a given query. Expressed as a value between 0 and 1 (for example, 0.7 or 70% similarity).</li> </ul> </li> <li> <p>Click Retrieve. The search results will display the chunks that match the query.</p> <p></p> </li> </ol> <p>Note</p> <p>Follow this detailed tutorial video to understand how to set up the RAG ingestion and create your vector index.</p>"},{"location":"ai/rag-application/#rag-retrieval","title":"RAG retrieval","text":"<p>After completing the RAG ingestion process, you need to implement a rag retrieval to connect your vector database with user queries and generate responses.</p> <p>For detailed implementation steps and configuration, refer to the RAG retrieval tutorial in the WSO2 Integrator: BI documentation.</p>"},{"location":"api-management/lifecycle-management/","title":"Lifecycle Management","text":"<p>API lifecycle management is an important aspect of API management. The API lifecycle consists of various states that an API passes through, from creation to retirement. In Devant, there are six distinct lifecycle states: <code>created</code>, <code>pre-released</code>, <code>published</code>, <code>blocked</code>, <code>deprecated</code>, and <code>retired</code>.</p> <p>By leveraging the various lifecycle states, API managers can optimize the development process and ensure that subscribers have access to the latest and most reliable APIs.</p>"},{"location":"api-management/lifecycle-management/#api-lifecycle-states","title":"API lifecycle states","text":"<p>The following lifecycle states are applicable to APIs in Devant:</p> API lifecycle state Use case Corresponding action <code>CREATED</code> The API is created but is not ready for consumption. The API is not visible to subscribers in the Developer Portal. <code>PRE-RELEASED</code> A prototype is created for early promotion and consumer testing. You can deploy a new API or a new version of an existing API as a prototype to provide subscribers with an early implementation of the API. The API is published to the Developer Portal as a pre-release. <code>PUBLISHED</code> The API is ready for subscribers to view and subscribe to via the Developer Portal The API is visible in the Developer Portal and is available for subscription. <code>BLOCKED</code> Access to the API is temporarily blocked. Runtime calls are blocked, and the API is not visible in the Developer Portal. <code>DEPRECATED</code> The old version of an API is moved to this state when a newer version of the API is PUBLISHED. The API is deployed and is available to existing subscribers. New subscriptions are disabled. Existing subscribers can continue to use it as usual until the API is retired. <code>RETIRED</code> The API is no longer in use when it is in this state. The API is unpublished and deleted from the Developer Portal."},{"location":"api-management/lifecycle-management/#manage-the-lifecycle-of-an-api","title":"Manage the lifecycle of an API","text":"<p>To change the lifecycle state of an API via the Devant Console, follow the instructions given below:</p> <p>Tip</p> <p>You must have publishing privileges to manage the lifecycle states of an integration.</p> <ol> <li>Sign in to the Devant Console.</li> <li>Select the project.</li> <li>In the Integrations pane, click on the integration for which you want to manage the lifecycle.</li> <li>In the overview page, click Lifecycle Status to view the lifecycle management page.</li> <li>You will see the lifecycle state transition diagram indicating the current lifecycle state of the integration. Just above the lifecycle state transition diagram, The possible lifecycle states you can apply to the integration are displayed just above the lifecycle state transition diagram. Click on a required lifecycle state to apply it to the integration. For example, if an integration is in the <code>Created</code> state, you can click either <code>Pre-release</code> or <code>Publish</code>.</li> </ol> <p></p>"},{"location":"devant-concepts/ci-cd/","title":"CI/CD","text":"<p>Devant provides a streamlined continuous integration and continuous deployment (CI/CD) experience to deploy integrations and services efficiently across multiple environments.</p> <p>Devant creates environments for each project, where all integrations within the project share the environments. An environment is an isolated deployment area with restricted network and resource access. Services deployed in one environment cannot communicate with services deployed in another.</p> <p>The Devant cloud data plane provides two default environments (i.e., development and production). However, if you are in a private data plane organization, you can customize and create multiple environments based on your requirements.</p> <p>Devant adopts a build once, deploy many strategy to manage integrations across multiple environments. It automatically builds an integration for each commit, which is then promoted to subsequent environments. This allows testing changes in lower, non-production environments like development before promoting the build to production.</p> <p>Devant injects configurations and secrets you maintain at the environment level into integrations at runtime. This ensures a strict separation of environment-specific configurations from source code. Although configurations can vary across environments, the build artifacts remain unchanged. Configurations and secrets include:</p> <ul> <li>Resource credentials to a database, cache, or other backing services.</li> <li>Credentials to external cloud services such as Amazon S3 or external APIs.</li> </ul> <p>All configurations and secrets are encrypted at rest and in transit and stored in a secure vault. In a private data plane organization, you can store configurations and secrets in your infrastructure.</p>"},{"location":"devant-concepts/ci-cd/#build","title":"Build","text":"<p>Devant automated build pipelines work as follows:</p> <ul> <li>Automatically builds a container image from the provided source code for the new commit.</li> <li>Runs security and vulnerability scans, if applicable, depending on the integration type.</li> <li>Pushes the container image to a container registry. Devant pushes the image to a Devant-managed registry in the cloud data plane. If it is a private data plane organization, Devant pushes the image to your own registry.</li> <li>Updates service endpoints and API specifications from the provided repository if applicable.</li> </ul>"},{"location":"devant-concepts/ci-cd/#repeatable-builds","title":"Repeatable builds","text":"<p>Devant can replicate builds from an identical code version (Git commit). This means that multiple builds initiated from the same Git commit will generate Docker images with the same behavior.</p> <p>Note</p> <p>In the event of multiple builds from the same code version, Devant preserves only the most recent version of the Docker image created from the particular code version.</p>"},{"location":"devant-concepts/ci-cd/#trigger-a-build","title":"Trigger a build","text":"<p>On the Build page, click Build Latest to build the latest commit. If necessary, you have the option to build earlier commits. Change the button to Show commits from the dropdown and click Show commits. Select the commit from the commits pane and click Build.</p>"},{"location":"devant-concepts/ci-cd/#build-logs","title":"Build logs","text":"<p>You can view build logs for specific builds on the Build page.</p> <p>To view details of a specific build, click View Details corresponding to the build.</p>"},{"location":"devant-concepts/ci-cd/#deployment","title":"Deployment","text":"<p>Once Devant builds the latest commit it automatically deploys to the Development environment. You can track the deployments on the Deploy page.</p>"},{"location":"devant-concepts/ci-cd/#immutable-deployments","title":"Immutable deployments","text":"<p>Once Devant deploys an integration with configurations, the configurations become immutable. Any subsequent change results in a new deployment.</p>"},{"location":"devant-concepts/ci-cd/#promote-an-integration-to-a-higher-environment","title":"Promote an integration to a higher environment","text":"<p>Devant builds artifacts once per GitHub commit and then promotes it to subsequent higher environments.</p> <p>In the overview page, click Promote to promote it manually across environments. This can be also done in the Deploy page.</p>"},{"location":"devant-concepts/ci-cd/#configurations","title":"Configurations","text":"<p>Devant allows you to define both environment-independent configurations and environment-specific configurations.</p>"},{"location":"devant-concepts/ci-cd/#environment-independent-configurations","title":"Environment-independent configurations","text":"<p>These configurations apply to all environments.</p> <p>To change environment-independent configurations, go to the Deploy page of the integration, make the necessary configuration changes via the Set Up card, and then trigger a new deployment to the initial environment. From there, you can proceed to promote the integration to higher environments.</p>"},{"location":"devant-concepts/ci-cd/#environment-specific-configurations","title":"Environment-specific configurations","text":"<p>These configurations apply to a particular environment.</p> <p>To change environment-specific configurations, go to the Deploy page of the integration, make the necessary configuration changes via the specific environment card, and trigger a new deployment.</p>"},{"location":"devant-concepts/ci-cd/#test","title":"Test","text":"<p>The information on the Test page is only applicable to automation and API.</p> <p>For the automation, click Test to run the automation once. Select Test with Arguments to test your automation with arguments. You can view current and historic execution details along with a quick snapshot of recent activity via the total count of executions within the last 30 days. For each execution, you can view vital information such as the unique execution ID, the time it was triggered, and relevant revision information. Furthermore, you can dive deeper into the details by clicking on a specific execution to access its associated logs. This information enhances transparency, troubleshooting capabilities, and overall execution management, allowing you to easily monitor and analyze workflows.</p> <p>For API, click Console in the Test dropdown to list all the resources in the API. Click Get Test Key to get a test key. Click a resource to expand it. Click Try it out and fill in the parameters (if any). Click Execute to invoke the resource. This will show the resource response and the execution details. You can also select the API Chat in the Test dropdown to test the API using an Intelligent Agent.</p>"},{"location":"devant-concepts/ci-cd/#zero-downtime-deployments","title":"Zero-downtime deployments","text":"<p>Devant performs rolling updates to ensure zero downtime between deployments and promotions.</p> <p>A new build undergoes a health check before switching traffic from the current build.</p> <p>Configuring the necessary health checks for an integration can prevent the deployment and promotion of unhealthy versions of the integration.</p>"},{"location":"devant-concepts/connections/","title":"Connections","text":"<p>Integrations can exist in two primary forms: standalone and integrated. Connecting integrations is an integral part of creating integrated solutions. Devant allows you to connect integrations using Connections. </p> <p>Using Connections, you can connect the integration you intend to deploy on Devant with other integrations on Devant or external services. Upon creating a connection to an integration on Devant, Devant provides you with a Connection ID and a set of connection parameters. Thereafter, you can configure your integration to establish a connection using this Connection ID and map connection parameters to environment variable names in your Devant integration. You can read these environment variable names in your integration implementation to retrieve the values and create a programmatic connection to the integration or service you want to consume.</p> <p>Devant dynamically injects values into the environment variables at runtime based on the configured mapping. This approach ensures that the connection parameter values and the integration connection creation remain loosely coupled, providing developers with flexibility and ease of maintenance.</p> <p>You can add Connections with different visibility levels: Project and Integration. The following section describes the visibility levels:</p>"},{"location":"devant-concepts/connections/#project-connections","title":"Project Connections","text":"<p>Project Connections are Connections you create to connect to services within a particular project. The Connections can be used by any integration within the project. </p> <p>For example, if you want to share a third-party service like Twilio across the project for all the integration within that project to reuse, you can create a project connection. Integration can refer to Project Connections using the connection ID.  Project connections created to connect to Devant integrations under the OAuth security scheme will share the same OAuth application across the project. Any integration reusing such a connection will use the same client ID and client secret.</p>"},{"location":"devant-concepts/connections/#integration-connections","title":"Integration Connections","text":"<p>Integration Connections are Connections you define at the integration level and used by only that integration. </p> <p>For example, create an integration connection if you want to connect a legacy service to a given integration. Integration can refer to the integration connection using the connection ID.  If your integration connects to more than one Devant integration, the integration connections created to communicate to those Devant integrations under the OAuth security scheme can share the same OAuth application by sharing the same client ID and secret between all such connections.</p>"},{"location":"devant-concepts/data-planes/","title":"Data Planes","text":"<p>Devant's architecture comprises two key components: the control plane and the data plane. The control plane handles essential tasks such as administering organizations, users, and projects. In addition, it also governs the entire journey of integration development, from the initial stages of creation, progressing to deployment, including measures to enforce governance and the provision for observability. The Devant control plane is a SaaS that manages all cloud data planes and private data planes. It caters to diverse user personas, including CIOs, architects, and developers, as well as DevOps, and platform engineers.</p> <p>The data plane is the environment where user integrations are deployed based on configurations set in the control plane. The integrations can be built in Ballerina and Wso2 Micro Integrator which are optimized for building integrations or using the Devant Cloud Editor. Importantly, all traffic related to the runtime of user integrations are restricted to the Devant data plane, ensuring strict containment of user data within its boundaries.</p> <p>Devant's architecture features two distinct data plane types: cloud data planes and private data planes. A cloud data plane utilizes a multi-tenanted infrastructure model for deploying user integrations, creating a shared yet secure environment for integration runtime. In contrast, a private data plane(PDP) provides dedicated infrastructure for a single organization to run its user integrations. This ensures an added layer of privacy and control for organizations with specific requirements.</p> <p></p>"},{"location":"devant-concepts/data-planes/#private-data-planes","title":"Private data planes","text":""},{"location":"devant-concepts/data-planes/#infrastructure","title":"Infrastructure","text":"<p>Devant private data planes can be deployed with almost all major cloud providers, such as Azure, AWS, and GCP, and are also compatible with on-premises infrastructure.</p> <p>The essential requirements for a private data plane include upstream-compatible Kubernetes clusters, a container registry, a key vault (secret store), and a logging service or log storage.</p> <p></p>"},{"location":"devant-concepts/data-planes/#system-components","title":"System components","text":"<p>Setting up the Devant PDP system involves using a Helm installation on the Kubernetes infrastructure.  The following software components are installed during the helm execution:</p> <ul> <li>Cilium CNI and service mesh.</li> <li>Devant API Gateways and related components.</li> <li>Devant PDP agent.</li> <li>Observability and logging APIs, along with observability agents.</li> <li>Flux controller.</li> </ul> <p>All of these software components receive automatic updates, including security patches and bug fixes through the flux controller connected to the Devant Update Management System. </p>"},{"location":"devant-concepts/data-planes/#connectivity-with-the-control-plane","title":"Connectivity with the control plane","text":"<p>The private data plane requires communication with the Devant control plane to manage various activities. All these communications are outbound from the private data plane, ensuring that there is no need to open any specific <code>IP:Port</code> from its perspective for these interactions. However, if an organization's network restricts all outbound traffic, it is necessary to permit outbound traffic to the public IP range of the Devant control plane.</p> <p>The following table outlines the inbound and outbound connections from a private data plane:</p> Data plane component Endpoint Direction Protocol Devant PDP agent Devant control plane (CP) (mizzen server) Outbound WSS Kubernetes API server Outbound (cluster internal) HTTPS, WS APIM/local adaptor Global adaptor Outbound HTTPS Azure Service Bus (CP) Outbound AMQP APIM/Enforcer Event hub (CP) Outbound AMQP Devant secret resolver Cloud secret store Outbound (VPC internal) HTTPS Container registry Container registry (public) Inbound HTTPS Container registry Outbound (VPC internal) HTTPS Certificate manager Azure DNS service Outbound HTTPS LetsEncrypt Outbound HTTPS Flux source controller GitHub Outbound HTTPS Flux Helm controller Devant container registry Outbound HTTPS <p>All communication between the control plane and the private data plane is secured using TLS.</p>"},{"location":"devant-concepts/data-planes/#observability-architecture","title":"Observability architecture","text":"<p>The following diagram depicts the architecture overview of Devant's in-data-plane log and observability in Azure PDP:</p> <p></p> <p>The private data plane observability architecture is centered around a strong commitment to data privacy and compliance. This is achieved through a strategic decision to retain logs and observability data within the data planes itself. Key aspects of this architecture include:</p> <ul> <li>Data storage at source: Logs and observability data are stored within the data plane itself, enhancing security, simplifying access, and ensuring compliance.</li> <li>Direct browser-to-data-plane interaction: The Devant Console in the user's browser directly interacts with APIs in the data plane, reducing potential data routing complexities and ensuring a more secure, direct flow of information.</li> <li>Reduced data exposure points: Fetching data directly from the data plane's APIs minimizes the number of data transfer points, effectively decreasing the chances of data exposure or interception.</li> <li>Compliance with regulatory standards: The architecture supports data locality, aligning with global regulatory standards like GDPR and CCPA by keeping data in its original environment.</li> <li>Improved performance and real-time insights: Direct interaction between the browser and data plane results in faster data retrieval, providing users with immediate insights.</li> <li>User transparency and control: Users have a clear view of their data's location and access methods, alongside granular control over data access.</li> </ul>"},{"location":"devant-concepts/data-planes/#security","title":"Security","text":"<p>The Devant private data plane ensures extensive, production-grade security, ranging from infrastructure and architecture to zero-trust network security. All incoming traffic is protected by a firewall and must undergo authentication and authorization via the API Gateway. It also provides end-to-end network traffic encryption using Cilium transparent encryption, ensuring efficient data path encryption.</p>"},{"location":"devant-concepts/data-planes/#management-models","title":"Management models","text":"<p>Devant supports the following management models for private data planes (PDPs), fostering collaboration between WSO2 and customers across diverse scenarios:</p> <ul> <li>WSO2 fully managed (infrastructure and PDP in WSO2 subscription) model</li> <li>WSO2 fully managed (infrastructure and PDP in customer subscription) model</li> <li>Customer self-managed (WSO2 provides installation script and updates) model</li> </ul>"},{"location":"devant-concepts/deployment-tracks/","title":"Deployment Tracks","text":"<p>Deployment Tracks in Devant are structured pathways for simplified integration deployment. They act like advanced CI/CD pipelines, ensuring your integrations reach their destinations seamlessly. They establish an organized and structured approach that minimizes the chances of errors and challenges that are typically associated with deployment workflows.</p>"},{"location":"devant-concepts/deployment-tracks/#the-significance-of-deployment-tracks","title":"The Significance of Deployment Tracks","text":"<p>Deployment Tracks offer practical solutions to enhance the API consumer experience by addressing two critical challenges:</p> <ul> <li> <p>Streamlined deployment: Deployment Tracks serve as well-designed routes for your integrations, enhancing the organization and reliability of the deployment process, similar to a well-structured express route.</p> </li> <li> <p>Efficient API versioning: Especially beneficial for managed APIs, Deployment Tracks provide a straightforward method for creating API versions that seamlessly interact with previous iterations. This simplified version management benefits both API creators and consumers alike.</p> </li> </ul>"},{"location":"devant-concepts/deployment-tracks/#streamlined-deployments","title":"Streamlined deployments","text":"<p>For streamlined deployments, Devant dissects two integral approaches that leverage Deployment Tracks: the comprehensive CI/CD integration and the focused CD-Only strategy.</p>"},{"location":"devant-concepts/deployment-tracks/#cicd-with-deployment-tracks","title":"CI/CD with Deployment Tracks","text":"<p>A deployment track is linked to a particular branch within a GitHub repository. This connection is useful for handling deployments to various environments. On the Deploy page, you can easily visualize the deployments to specific environments associated with your selected deployment track. Merging a pull request (PR) automatically triggers a deployment to the development environment.</p> <p></p>"},{"location":"devant-concepts/deployment-tracks/#efficient-api-versioning","title":"Efficient API versioning","text":"<p>This section applies only to Integration as APIs. When working with Integration as APIs in Devant, it is important to have an effective API versioning mechanism. Devant follows a versioning mechanism based on Semantic Versioning (SemVer) but only includes the major version and minor version with the prefix <code>v</code>. </p> <p>For example, <code>v1.2</code>. </p> <p>You can follow the approach given below when you version APIs in Devant:</p> <ul> <li>Increment the major version when you make incompatible API changes.</li> <li>Increment the minor version when you add functionality in a backward-compatible manner.</li> </ul> <p>What is Semantic Versioning?</p> <p>Semantic Versioning (SemVer) is a specification that defines how to assign and increment version numbers for software products, including APIs. For more information, see Semantic Versioning specification.</p> <p>One of the primary concerns when dealing with SaaS APIs is to minimize disruption for API consumers while continuously developing and deploying updates.</p> <p>In compliance with SemVer, changes that don't introduce breaking or additive modifications to the API are categorized as patch updates. Hover, from the perspective of API consumers, these changes should ideally not disrupt their API clients. Typically, API consumers are most concerned with major API version alterations, but there might be instances where minor version changes are communicated to them.</p> <p>Therefore, in the context of deployment tracks, API developers only need to specify the major and minor versions being delivered from a particular deployment track. This information is treated as the API version attribute of a deployment track. If the publisher requires versioning for internal tracking purposes, this can be accomplished in Git through the use of Git tags, GitHub with GitHub releases, and so forth.</p> <p></p>"},{"location":"devant-concepts/endpoint/","title":"Endpoint","text":"<p>An Endpoint is a network-exposed function that resides within an integration. In Devant, Integration Type <code>Integration as API</code> exposes one or more endpoints. Each endpoint in an integration can have a service contract (OpenAPI, GraphQL SDL) associated with it. This contract is used to expose the endpoint to consumers. In the absence of a contract, Devant uses /* exposed on all HTTP verbs as the default contract to expose the service or the integration.</p> <p>Each endpoint exposed in an integration is considered a single API. Therefore, Devant allows you to do API management per endpoint for a given integration. For example, you can perform lifecycle management and configure security settings per endpoint in a given integration.</p>"},{"location":"devant-concepts/environments/","title":"Environments","text":"<p>Devant offers developers one or more environments to run their integrations within a given data plane. By default, the Devant cloud data plane provides two environments (i.e., development and production). Each project in Devant is associated with one or more environments available in the organization. For example, project A may choose to utilize dev, staging, and production environments, while project B may only use development and production environments.</p> <p>You can promote integrations within a project across available environments. When you promote an integration, its configuration values can be overridden with environment-specific values.</p> <p>The following diagram illustrates how an integration is promoted across environments.</p> <p></p>"},{"location":"devant-concepts/integration/","title":"Integration","text":"<p>An integration within a project represents a single unit of work in an integration solution. An integration is usually a single microservice, API, or job/task. Each integration in Devant is attached to a given directory path in a Git repository which contains the program source. An integration is Devant\u2019s unit of deployment. Each integration maps to a single pod in the Kubernetes cluster (data plane) at deployment time. Therefore, you can deploy, manage, and scale each integration in Devant independently.</p> <p>Devant supports different integration types for various use cases. These include integration types such as Automation, AI Agent, Integration as API, and so on. Each integration type hosts unique features based on its characteristics. For example, a scheduled integration can accept a cron expression as a configuration to schedule an integration job/task.</p>"},{"location":"devant-concepts/organization/","title":"Organization","text":"<p>An organization in Devant is a logical grouping of users and user resources. A first-time user must create an organization and be a member of it when signing in to Devant. Users and resources in an organization cannot access resources in another organization unless an admin of the other organization invites them and adds them as member of that organization. A user cannot create more than one organization.</p>"},{"location":"devant-concepts/organization/#switch-organizations","title":"Switch organizations","text":"<p>If you are a member of more than one organization, you can switch from one organization to another when necessary. To do this, select the required organization from the Organization list in the Devant Console header.</p>"},{"location":"devant-concepts/organization/#inviting-users","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access its resources.</p>"},{"location":"devant-concepts/organization/#manage-user-permission","title":"Manage user permission","text":"<p>Devant manages user permissions with groups and roles.</p>"},{"location":"devant-concepts/organization/#groups","title":"Groups","text":"<p>A group in Devant is a collection of users, each with one or more roles assigned to them. Users within a group inherit the permissions associated with the roles assigned to that group. For instance, if a user is added to the <code>API Publisher</code> group, they will automatically receive the <code>API Publisher</code> role.</p> <p>Devant comes with predefined groups already configured with specific roles, as follows:</p> <ul> <li>API Publisher: A collection of users who have the API Publisher role.</li> <li>API Subscriber: A collection of users who have the API Subscriber role.</li> <li>Admin: A collection of users who have the Admin role.</li> <li>Billing Admin: A collection of users who have the Billing Admin role.</li> <li>Devant DevOps: A collection of users who have the Devant DevOps role.</li> <li>Developer: Users who develop, deploy, and manage integrations at scale.</li> <li>External API Subscriber: A collection of users who have the External API Subscriber role.</li> </ul> <p>When creating a new group to invite members, be sure to assign a role to the group to ensure users have the required permissions.</p>"},{"location":"devant-concepts/organization/#roles","title":"Roles","text":"<p>Devant roles are defined as follows:</p> <ul> <li>API Publisher: An API publisher can discover, create, publish, delete, test, and manage an API.</li> <li>API Subscriber: An API subscriber is a developer in a particular organization. An API subscriber can subscribe to an API, manage subscriptions, manage integrations, generate API keys, and manage API keys.</li> <li>Admin: An administrator is responsible for all administration tasks, including user management, customizing the Developer Portal, managing projects, enabling analytics, managing domains, etc.</li> <li>Billing Admin: Is responsible for billing administration that includes viewing tiers, creating and viewing organizations, managing invoices, viewing and creating subscriptions, and viewing and creating payment methods.</li> <li>Devant DevOps: A Devant DevOps user is a user with access to the Devant DevOps portal, enabling them to actively manage, ensure dependable deployment, and monitor integrations.</li> <li>Developer: Users who develop, deploy, and manage integrations at scale. </li> <li>External API subscriber: External API subscribers are API consumers who have access only to the API Developer Portal. They can join an organization with the sole purpose of consuming APIs.</li> <li>Environment Manager (Deprecated): Manages deployment environments.</li> </ul>"},{"location":"devant-concepts/organization/#organization-id","title":"Organization ID","text":"<p>The Organization ID serves as a unique identifier for each organization. To get the organization ID, follow the steps below:</p> <ol> <li>Go to https://console.devant.dev/ and sign in. This opens the project home page.</li> <li>Click on the Organization list on the header and select your organization.</li> <li>In the left navigation, expand Admin dropdown and click Settings.</li> <li>Under Access Control, click Copy ID.</li> </ol>"},{"location":"devant-concepts/organization/#organization-handle","title":"Organization Handle","text":"<p>The organization handle is a unique string that directly corresponds to your organization's name. To get the organization handle, follow the steps below:</p> <ol> <li>Go to https://console.devant.dev/ and sign in. This opens the project home page.</li> <li>Click on the Organization list on the header and select your organization.</li> <li>In the left navigation, expand Admin dropdown and click Settings.</li> <li>Under Access Control, click Copy Handle.</li> </ol>"},{"location":"devant-concepts/project/","title":"Project","text":"<p>A project in Devant is a logical group of related integrations that typically represent a complete solution. A project consists of one or more integrations. All integrations within a project can ideally be (but are not restricted to) in a single GitHub repository under different paths. This is also known as the monorepo architecture.</p> <p>At deployment time, all integrations within a given project are deployed into a single namespace of the Kubernetes cluster. Integrations within a project can be exposed to the public internet, internally to the rest of the organization, or privately within the project only. A project in Devant is represented as a cell with regard to the Cell-based architecture. The following diagram illustrates a project and how the integration within a project are laid out at runtime:</p> <p></p>"},{"location":"devant-concepts/resource-hierarchy/","title":"Resource Hierarchy","text":"<p>The following diagram depicts the high-level resources and their relationships in Devant.</p> <p></p>"},{"location":"devant-concepts/resource-hierarchy/#organizations-and-data-planes","title":"Organizations and data planes","text":"<p>Data planes are connected to the organization and are available for all projects within the organization. When you create an environment in a project, the data plane connected to the organization is linked with an automatically generated Kubernetes namespace.</p>"},{"location":"devant-concepts/resource-hierarchy/#environments-and-clusters","title":"Environments and clusters","text":"<p>Devant allows multiple Kubernetes clusters to be associated with an environment. This enables you to build highly resilient and resource-efficient solutions that utilize multiple clusters. Devant synchronizes your integrations and workloads between associated clusters in an environment, allowing you to perform multi-cluster deployment with a single click.</p> <p>The following diagram illustrates how multiple clusters associate with different environments:</p> <p></p> <p>Note</p> <p>It is not necessary to use a different cluster per environment. You can create multiple environments on the same cluster. The above diagram is an example of a specific solution. Your integration architecture may require a different configuration than what is depicted.</p>"},{"location":"devant-concepts/resource-hierarchy/#integrations-and-environments","title":"Integrations and environments","text":"<p>Integration belongs to a project in Devant, and environments are provisioned per project. When an integration is deployed, it is deployed as a container to the specified environment. Once deployed, you can promote the container image across the environments available in the project.</p>"},{"location":"devant-samples/explore-the-demo-organization/","title":"Explore the Demo Organization","text":"<p>The demo organization in Devant provides a hands-on view of a fully deployed system in read-only mode. This organization, maintained by Devant, demonstrates a real-world use case to help you understand how Devant simplifies developing, deploying, and managing cloud-native applications.</p>"},{"location":"devant-samples/explore-the-demo-organization/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you are signing in to the Devant Console for the first time, create an organization as follows:<ol> <li>Go to the Devant Console and sign in using Google, GitHub, or Microsoft.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create. This creates the organization and opens the organization home page.</li> </ol> </li> </ul>"},{"location":"devant-samples/explore-the-demo-organization/#join-the-demo-organization","title":"Join the demo organization","text":"<ol> <li>Sign in to the Devant Console.</li> <li>In the Devant Console header, click the Organization list to view available organizations.</li> <li>Under Invited Organizations, you will see the Demo Organization.</li> <li>To gain access to the Demo Organization, click Join next to it.</li> </ol>"},{"location":"devant-samples/explore-the-demo-organization/#demo-organization-overview","title":"Demo organization overview","text":"<p>When you join the demo organization, you gain access to a comprehensive, read-only sample application for managing customer rewards. This application illustrates a complete use case, showcasing the capabilities of Devant.</p> <p>Key aspects you can explore include:</p> <ul> <li>Projects and integrations: View the sample projects and their respective integrations, where each integration serves a distinct function within the customer rewards management system.</li> <li>Integration details and architecture: Understand the architecture by exploring how each integration is configured, including environment variables, API keys, and other dependencies that enable the required functionality.</li> <li>Build and deployment pipelines: Inspect the build configurations and deployment history for each integration.</li> <li>Delivery insights, usage insights, and observability metrics: Analyze metrics and insights for each integration.</li> </ul>"},{"location":"devant-samples/quick-deploy-a-sample/","title":"Quick Deploy a Sample","text":"<p>Devant provides a Quick Deploy option for samples, allowing you to deploy a sample with a single click. This feature enables you to quickly explore and experiment with the sample.</p>"},{"location":"devant-samples/quick-deploy-a-sample/#prerequisites","title":"Prerequisites","text":"<p>Before you start using the samples, complete the following steps:</p> <ul> <li>If you're signing in to Devant for the first time, follow these steps to create an organization and project:</li> <li>Go to https://console.devant.dev/ and sign in using your preferred sign-in option.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use and click Create.</li> <li>Select your region and click Confirm.</li> </ul>"},{"location":"devant-samples/quick-deploy-a-sample/#try-out-quick-deploy","title":"Try out quick deploy","text":"<p>To quickly deploy a sample, follow these steps:</p> <ol> <li>Go to https://console.devant.dev/new and sign in. This opens the new integration page.</li> <li>On the new integration page, Try a Sample card contains a selection of samples.</li> <li>Hover over a sample of your choice and click Quick Deploy. This creates the integration and deploys it automatically.</li> </ol>"},{"location":"devant-samples/quick-deploy-a-sample/#post-deployment-actions","title":"Post-deployment actions","text":"<p>Once you deploy a sample, follow one of the post-deployment actions below based on the integration type:</p> <ul> <li>For Integration as API: On the overview page, click Test to test the deployed API.</li> <li>For Automation: On the overview page, click Test to run your automation once or click Schedule to schedule the automation.</li> </ul> <p>This feature allows you to quickly explore and understand how Devant works with minimal setup.</p>"},{"location":"devant-samples/samples-overview/","title":"Samples Overview","text":"<p>Devant provides an extensive collection of samples for a wide range of use cases. You can quickly deploy and explore these samples to easily understand the core functionalities of the platform.</p>"},{"location":"devant-samples/samples-overview/#prerequisites","title":"Prerequisites","text":"<p>Before you use the samples, complete the following steps:</p> <ul> <li>If you're signing in for the first time, follow these steps to create an organization and then create a project:  </li> <li>Go to the Devant Console and sign in using Google, GitHub, or Microsoft.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create. This creates an organization and takes you to its Overview page.</li> <li>On the organization home page, click + Create Project.</li> <li>Enter a display name, unique name, and description for the project.</li> <li>Click Create. This creates the project and takes you to its Overview page.</li> </ul>"},{"location":"devant-samples/samples-overview/#explore-the-devant-samples-collection","title":"Explore the Devant samples collection","text":"<p>You can filter and explore Devant's sample collection based on your preference.</p> <p>To view available samples, follow these steps:</p> <ol> <li>Sign in to the Devant Console.</li> <li>In the Devant Console header, go to the Project list and select your project to open its Overview page.</li> <li>On the project Overview page, Try a Sample card contains a selection of samples.</li> </ol> <p>You can either quick deploy a sample or access its source code on GitHub. For details on quick deploying a sample, see Quick Deploy a Sample.</p>"},{"location":"manage-databases-and-caches/add-devant-managed-databases-and-caches-to-the-marketplace/","title":"Add Devant-Managed Databases and Caches to the Marketplace","text":"<p>When you create a Devant-managed database or cache, you can add it to the Marketplace, making it available for consumption through a connection.</p> <p>Note</p> <p>To add a Devant-managed database or cache to the Marketplace, you must register at least one credential for it.</p>"},{"location":"manage-databases-and-caches/add-devant-managed-databases-and-caches-to-the-marketplace/#step-1-register-credentials","title":"Step 1: Register credentials","text":"<p>To register credentials, you can either use the default super admin credentials or the credentials you create using the super admin credentials. When you create a database or cache server, super admin credentials are generated by default. You can use these super admin credentials to create new user credentials. The steps to create new user credentials depend on the type of database or cache you are using.</p> <p>You can use the registered credentials to create a connection. During connection setup, you must select credentials for each database from the list of available credentials.</p> <p>To register credentials for a database, follow these steps:</p> <ol> <li>Sign in to the Devant Console.</li> <li>Go to the Devant Console header and select your organization from the Organization list.</li> <li>In the left navigation menu, click Dependencies and then click Databases.</li> <li>Click on a required database to view its details.</li> <li>Click the Databases tab.</li> <li>Click to expand the database for which you want to register credentials, then click Add Credentials.</li> <li> <p>In the Add Credentials dialog, do one of the following depending on your requirements:</p> <ul> <li>Select Add New Credentials and specify the following:<ul> <li>A display name for the credentials.</li> <li>The database credentials you created to use when setting up database connections in Devant.</li> <li>The environment where you want to use the credentials.</li> </ul> </li> </ul> <p>The steps to create new user credentials depend on the type of database or cache you are using. In general, you must log in to your database server as the super admin using a command-line interface or a database management tool. Then, create new database users with the required permission levels.</p> <ul> <li>Select Add Super Admin Credentials and specify the following:<ul> <li>A display name for the credentials.</li> <li>The environment where you want to use the credentials.</li> </ul> </li> </ul> </li> <li> <p>Click Save.</p> </li> </ol> <p>Tip</p> <p>Devant allows you to delete registered credentials to prevent their use when establishing new connections. However, deleting credentials will not affect any existing database connections that are already using them.</p>"},{"location":"manage-databases-and-caches/add-devant-managed-databases-and-caches-to-the-marketplace/#step-2-add-the-database-or-cache-to-the-marketplace","title":"Step 2: Add the database or cache to the Marketplace","text":"<ul> <li>On the Databases tab, click +Add to Marketplace corresponding to the database you want to add.</li> </ul> <p>Once the database is added to the Marketplace, it can be consumed via a connection. For details on creating a connection to a Devant-managed database, see Create a connection to a database.</p> <p>Note</p> <p>To remove a database or cache that you added to the Marketplace, click the corresponding Remove from Marketplace. This action prevents new connections to the removed database, but existing connections remain unaffected.</p> <p>For details on using a database connection in your integration, see Use a Database Connection in Your Integration.</p>"},{"location":"manage-databases-and-caches/devant-managed-caches/","title":"Devant-Managed Cache","text":"<p>Fully compatible with legacy Redis\u00ae OSS.</p> <p>Devant-Managed Cache provides fully-managed in-memory NoSQL databases on AWS, Azure, GCP, and Digital Ocean and can be used as a cache, database, streaming engine, or message broker.</p>"},{"location":"manage-databases-and-caches/devant-managed-caches/#create-a-devant-managed-cache","title":"Create a Devant-Managed Cache","text":"<p>Follow the steps below to create a Devant-Managed Cache:</p> <ol> <li>Sign in to the Devant Console at https://console.devant.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Databases.</li> <li>Click + Create and select Devant-Managed Cache as the data store type. Provide a display name for this server and follow the instructions.</li> <li>Select a preferred cloud provider (AWS, Azure, GCP, or Digital Ocean).<ul> <li>The cloud provider provisions the compute and storage infrastructure for your data store.</li> <li>The functionality remains the same across cloud providers, though service plans and costs may differ.</li> </ul> </li> <li>Select a region for your data store.<ul> <li>Available regions depend on the selected cloud provider. Devant currently supports US and EU regions across all providers.</li> </ul> </li> <li>Select a service plan.<ul> <li>Service plans vary in terms of dedicated CPU, memory (RAM), and storage space allocated for your data store, as well as high-availability configurations for production use cases.</li> </ul> </li> <li>Click Create.</li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-caches/#connect-to-your-devant-managed-cache","title":"Connect to your Devant-Managed Cache","text":"<p>To connect to your Devant-Managed Cache, follow these guidelines:</p> <ul> <li>Use any legacy Redis\u00ae OSS compatible driver (in any programming language) to connect to your Devant-Managed Cache.</li> <li>You can find the connection parameters in the Overview section in the Devant Console under the relevant database. Note that Devant-Managed Cache enforces TLS.</li> <li>Devant-Managed Cache instances accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#high-availability-and-automatic-backups","title":"High availability and automatic backups","text":"<p>The high availability and the automatic backup retention periods for a Devant-Managed Cache can vary as follows depending on the service plan you select.</p> Service plan High availability Backup features Backup history Hobbyist Single-node with limited availability. Single backup only for disaster recovery None Startup Single-node with limited availability. Single backup only for disaster recovery 1 day Business Two-node (primary + standby) with higher availability (automatic failover if the primary node fails). Automatic backups 3 days Premium Three-node (primary + standby + standby) with highest availability (automatic failover if the primary node fails). Automatic backups 13 days <p>In general, service plans are recommended for production scenarios due to the following reasons:</p> <ul> <li>Provides another physical copy of the data in case of hardware, software, or network failures.</li> <li>Reduces the data loss window in disaster scenarios.</li> <li>Ensures quicker restoration with controlled failover in case of failures, as the standby is already installed and running.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#automatic-backups","title":"Automatic backups","text":"<ul> <li>Devant runs full backups daily to automatically backup Devant-Managed Caches and has write-ahead logs (WAL) copied at 5-minute intervals or for every new file generated.</li> <li>Devant encrypts all backups at rest.</li> <li>Devant automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the data store.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#failure-recovery","title":"Failure recovery","text":"<ul> <li> <p>Minor failures: Devant automatically handles minor failures such as service process crashes or temporary loss of network access in all plans without requiring significant changes to the service deployment. Devant automatically restores the service to normal operation once it automatically restarts the crashed process or when it restores the network access.</p> </li> <li> <p>Severe failures: Failures such as losing a node entirely in case of hardware or severe software problems, require more drastic recovery measures. The monitoring infrastructure automatically detects a failing node when the node starts reporting issues in the self-diagnostics or when it stops communicating. In such cases, the monitoring infrastructure automatically schedules a new replacement node to be created.</p> <ul> <li>In the event of a data store failover, the service URI of your service remains the same; only the IP address will change to point to the new primary node.</li> <li>Hobbyist and Startup plans provide a single node, and in case of failure, a new node starts up, restores its state from the latest available backup, and resumes serving traffic.</li> <li>As there is just a single/primary node, the caching service becomes unavailable for the duration of the restoration operation. Therefore, all write operations made since the last backup will be lost.</li> </ul> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-caches/#limitations","title":"Limitations","text":""},{"location":"manage-databases-and-caches/devant-managed-caches/#connection-limits","title":"Connection limits","text":"<p>The number of simultaneous connections in a Devant-Managed Cache depends on the total available memory on the server instances.</p> <p>You can use the following to estimate:</p> <pre><code>max_number_of_connections = 4 x m\n</code></pre> <p>Here, <code>m</code> represents the memory in megabytes, where at least 10,000 connections are available, even on the smallest servers. For example, on a server with 4GB memory (4,096 MB), the simultaneous connections are:</p> <pre><code>4 x 4096 = 16384 // 16k connections\n</code></pre> <p>This number is estimated by the exact available memory so it can vary between different plans and cloud providers. To see the exact maximum connections allowed, use the * redis-cli and info command as follows:</p> <pre><code>echo \"info\" | redis-cli -u REDIS_URI | grep maxclients\n</code></pre>"},{"location":"manage-databases-and-caches/devant-managed-caches/#restricted-commands","title":"Restricted commands","text":"<p>To maintain the stability and security of a managed environment, Devant restricts certain commands on Devant-Managed Cache services.</p> <p>Support for Lua scripts on Devant-Managed Cache</p> <ul> <li>Devant-Managed Cache has built-in support for running Lua scripts to perform various actions directly on the server. Scripting is typically controlled using the <code>EVAL</code>, <code>EVALSHA</code>, and <code>SCRIPT LOAD</code> commands.</li> <li>For all newly-created cache instances, <code>EVAL</code>, <code>EVALSHA</code>, and <code>SCRIPT LOAD</code> commands are enabled by default.</li> </ul> <p>The following commands are disabled on Devant:</p> <ul> <li><code>bgrewriteaof</code>: Initiates a background append-only file rewrite.</li> <li><code>cluster</code>: Manages Caching cluster commands.</li> <li><code>command</code>: Provides details about all Caching commands.</li> <li><code>debug</code>: Contains sub-commands for debugging Caching.</li> <li><code>failover</code>: Manages manual failover of a master to a replica.</li> <li><code>migrate</code>: Atomically transfers a key from one caching instance to another.</li> <li><code>role</code>: Returns the role of the instance in the context of replication.</li> <li><code>slaveof</code>: Makes the server a replica of another instance, or promotes it as master.</li> <li><code>acl</code>: Manages caching access control lists.</li> <li><code>bgsave</code>: Creates a snapshot of the data set into a dump file.</li> <li><code>config</code>: Alters the configuration of a running caching server.</li> <li><code>lastsave</code>: Returns the UNIX timestamp of the last successful save to disk.</li> <li><code>monitor</code>: Streams back every command processed by the Caching server.</li> <li><code>replicaof</code>: Makes the server a replica of another instance.</li> <li><code>save</code>: Synchronously saves the dataset to disk.</li> <li><code>shutdown</code>: Synchronously saves the dataset to disk and then shuts down the server.</li> </ul> <p>The following <code>eval</code> commands are also disabled:</p> <ul> <li><code>eval</code>: Executes a Lua script server-side.</li> <li><code>eval_ro</code>: Read-only variant of the eval command.</li> <li><code>evalsha</code>: Executes a script cached on the server side by its SHA1 digest.</li> <li><code>evalsha_ro</code>: Read-only variant of the evalsha command.</li> <li><code>fcall</code>: Calls a Caching function.</li> <li><code>fcall_ro</code>: Read-only variant of the fcall command.</li> <li><code>function</code>: Manages Caching functions.</li> <li><code>script</code>: Manages the script cache.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/","title":"Devant-Managed Databases, Vector Databases, and Caches","text":"<p>Devant allows you to create PostgreSQL and MySQL databases as well as Devant-Managed Cache instances on all major cloud providers (AWS, Azure, GCP, and DigitalOcean) as fully Devant-managed platform services. These databases and caches can be seamlessly provisioned to offer persistence and caching capabilities for all your Devant integrations. Devant provides various service plans for each type, ranging from smaller instances for development purposes to production-grade databases with automatic backups and high-availability multi-nodes.</p> <p>Note</p> <ul> <li>The capability to create Devant-managed databases, vector databases, and cache services is available only for paid Devant users.</li> <li>Billing for these services will be included in your Devant subscription, with pricing varying based on the service plan of the resources you create. For more details, see Devant Platform Services Billing.</li> </ul> <p>Explore the free trial</p> <p>Devant provides a 7-day free trial for all database types on the 'Hobbyist' service plan, available to free-tier users.</p>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/#postgresql-on-devant","title":"PostgreSQL on Devant","text":"<p>PostgreSQL (also known as Postgres), is an open-source object-relational database management system. You can create PostgreSQL databases on Devant as fully Devant-managed, flexible SQL databases that are ideal for both structured and unstructured data. If you want to perform an efficient vector similarity search, you can create a PostgreSQL vector database.</p> <ul> <li>Create a PostgreSQL database on Devant</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/#mysql-on-devant","title":"MySQL on Devant","text":"<p>MySQL is a user-friendly, flexible, open-source relational database management system with a well-established history in the SQL database realm. Devant allows you to swiftly create fully Devant-managed MySQL databases, enabling rapid setup and utilization.</p> <ul> <li>Create a MySQL database on Devant</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-databases-and-caches/#devant-managed-cache","title":"Devant-Managed Cache","text":"<p>A fully-managed cache compatible with legacy Redis\u00ae OSS. A versatile, in-memory NoSQL database that serves as a cache, database, streaming engine, and message broker. Devant-managed Cache allows you to have fully-managed instances that can be swiftly provisioned and integrated into your applications within minutes.</p> <ul> <li>Create a Devant-managed Cache</li> </ul> <p>  PostgreSQL, MySQL, and Redis\u00ae are trademarks and property of their respective owners. All product and service names used in this documentation are for identification purposes only.  </p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/","title":"Devant-managed MySQL Databases","text":"<p>MySQL on Devant offers fully managed, flexible relational databases on AWS, Azure, GCP, and Digital Ocean.</p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#create-a-devant-managed-mysql-database","title":"Create a Devant-managed MySQL database","text":"<p>Follow the steps below to create a Devant-managed MySQL database:</p> <ol> <li>From the environment list on the header, located next to the Deployment Tracks list, select your Organization.</li> <li>In the left navigation menu, click Dependencies and then Databases.</li> <li>Click Create and select MySQL as the database type. Provide a display name for this server and follow the instructions.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, and Digital Ocean.</li> <li>Devant uses the cloud provider to provision the compute and storage infrastructure for your database.</li> <li>There is no functional difference between databases created on different cloud providers, apart from changes to service plans (and associated costs).</li> <li>Choose the region for your database.</li> <li>Available regions will depend on the selected cloud provider. Devant currently supports US and EU regions across all providers.</li> <li>Select the service plan.</li> <li>Service plans vary in the dedicated CPU, memory (RAM), storage space allocated for your database, the backup retention periods, and high-availability configurations for production use cases.</li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#connect-to-your-devant-managed-mysql-database","title":"Connect to your Devant-managed MySQL database","text":"<p>To connect to your Devant-managed MySQL database, consider the following guidelines:</p> <ul> <li>You can use any MySQL driver, ORM, or supported generic SQL library (may depend on the programming language) to connect to the database.</li> <li>You can find the connection parameters in the Overview section in the Devant Console under the relevant database.</li> <li>MySQL databases accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#high-availability-and-automatic-backups","title":"High Availability and Automatic Backups","text":"<p>The high availability characteristics and the automatic backup retention periods for Devant-managed MySQL databases vary based on your service plan as explained below:</p> Service Plan High Availability Backup Retention Time Hobbyist Single-node with limited availability None Startup Single-node with limited availability 2 days Business Two-node (primary + standby) with higher availability 14 days Premium Three-node (primary + standby + standby) with highest availability 30 days <p>In general, we recommend service plans for production scenarios for multiple reasons: - Provides another physical copy of the data in case of hardware, software, or network failures. - Typically reduces the data loss window in disaster scenarios. - Provides a quicker time to restore with a controlled failover in case of failures, as the standby is already installed and running.</p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#automatic-backups","title":"Automatic Backups","text":"<ul> <li> <p>Devant runs full backups daily to automatically back up Devant-managed MySQL databases and record binary logs continuously.   Devant encrypts all backups at rest.</p> </li> <li> <p>Devant automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the database.</p> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#connection-limits","title":"Connection Limits","text":"<p>The maximum number of simultaneous connections to MySQL databases is fixed for each service plan and depends on how much RAM your service plan offers.</p> <p>Note</p> <p>An <code>extra_connection</code> with a value of <code>1</code> is added for system processes for all MySQL databases, regardless of the service plan.</p>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#for-plans-under-4-gib-ram","title":"For plans under 4 GiB RAM","text":"<p>For plans under 4 GiB of RAM, the number of allowed connections is <code>75</code> per GiB:</p> <pre><code>max_connections = 75 x RAM + extra_connection\n</code></pre>"},{"location":"manage-databases-and-caches/devant-managed-mysql-databases/#for-plans-with-over-4-gib-ram","title":"For plans with over 4 GiB RAM:","text":"<p>For plans with 4 GiB or more RAM, the number of allowed connections is <code>100</code> per GiB:</p> <pre><code>max_connections = 100 x RAM + extra_connection\n</code></pre>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/","title":"Devant-Managed PostgreSQL Databases and Vector Databases","text":"<p>PostgreSQL on Devant offers fully Devant-managed, efficient object-relational databases on AWS, Azure, GCP, and Digital Ocean. Additionally, Devant allows you to create fully-managed PostgreSQL vector databases if you want to perform efficient vector similarity search.</p>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#create-a-devant-managed-postgresql-database","title":"Create a Devant-managed PostgreSQL database","text":"<p>Follow the steps below to create a Devant-managed PostgreSQL database:</p> <ol> <li>Sign in to the Devant Console at https://console.devant.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then Databases.</li> <li>Click Create and select PostgreSQL as the database type. Provide a display name for this server and follow the instructions.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, or Digital Ocean.<ul> <li>The cloud provider is used to provision the compute and storage infrastructure for your database.</li> <li>There is no functional difference between databases created on different cloud providers, apart from changes to service plans (and associated costs).</li> </ul> </li> <li>Choose the region for your database.<ul> <li>Available regions will depend on the selected cloud provider. Devant currently supports US and EU regions across all providers.</li> </ul> </li> <li>Select the service plan.<ul> <li>Service plans vary in the dedicated CPU, memory (RAM), storage space allocated for your database, the backup retention periods, and high-availability configurations for production use cases.</li> </ul> </li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#create-a-devant-managed-postgresql-vector-database","title":"Create a Devant-managed PostgreSQL vector database","text":"<p>Follow the steps below to create a Devant-managed PostgreSQL vector database:</p> <ol> <li>Sign in to the Devant Console at https://console.devant.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then Vector\u00a0Databases.</li> <li>Follow steps 4 onwards in the Create a Devant-managed PostgreSQL database section.</li> </ol>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#connecting-to-your-devant-managed-postgresql-database","title":"Connecting to your Devant-managed PostgreSQL database","text":"<p>To connect to your Devant-managed PostgreSQL database, consider the following guidelines:</p> <ul> <li>You can use any PostgreSQL driver, ORM, or supported generic SQL library (may depend on the programming language) to connect to the database.</li> <li>The connection parameters can be found in the Overview section in the Devant Console under the relevant database.</li> <li>PostgreSQL databases accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#high-availability-and-automatic-backups","title":"High Availability and Automatic Backups","text":"<p>The high availability characteristics and the automatic backup retention periods for Devant-managed PostgreSQL databases vary based on the selected service plan as shown below.</p> Service Plan High Availability Backup Retention Time Hobbyist Single-node with limited availability None Startup Single-node with limited availability 2 days Business Two-node (primary + standby) with higher availability 14 days Premium Three-node (primary + standby + standby) with highest availability 30 days <p>Service plans with standby nodes are generally recommended for production scenarios for multiple reasons: - Provides another physical copy of the data in case of hardware, software, or network failures. - Typically reduces the data loss window in disaster scenarios. - Provides a quicker time to restore with a controlled failover in case of failures, as the standby is already installed and running.</p>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#automatic-backups","title":"Automatic Backups","text":"<ul> <li> <p>Devant runs full backups daily to automatically back up Devant-managed PostgreSQL databases and copies the write-ahead logs (WAL)  at 5-minute intervals or for every new file generated.   Devant encrypts all backups at rest.</p> </li> <li> <p>Devant automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the database.</p> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#failure-recovery","title":"Failure Recovery","text":"<ul> <li> <p>Minor failures: Devant automatically handles minor failures such as service process crashes or temporary loss of network access in all plans without requiring significant changes to the service deployment. Devant automatically restores the service to normal operation once Devant automatically restarts the crashed process or when Devant restores the network access.</p> </li> <li> <p>Severe failures: To handle severe failures such as losing a node entirely in case of hardware or severe software problems, requires more drastic recovery measures. The monitoring infrastructure automatically detects a failing node, both when the node starts reporting issues in the self-diagnostics or when it stops communicating. In such cases, the monitoring infrastructure automatically schedules a new replacement node to be created.</p> <ul> <li>In the event of database failover, the Service URI of your service remains the same; only the IP address will change to point to the new primary node.</li> <li>Hobbyist and Startup plan provide a single node, and in case of failure, a new node starts up, restores its state from the latest available backup, and resumes serving traffic.     In this plan, as there is just a single node providing the service, the service will become unavailable for the duration of the restoration. In addition, any write operations made since the backup of the latest WAL file will be lost. Typically, this time window is limited to either five minutes of time or one WAL file.</li> </ul> </li> </ul>"},{"location":"manage-databases-and-caches/devant-managed-postgresql-databases/#connection-limits","title":"Connection limits","text":"<p>The following connection limits apply to Devant-managed PostgreSQL databases based on the selected service plan.</p> Service Plan Max Connections Hobbyist 25 Startup/Business/Premium-4 100 Business-16 400 Premium-8 200"},{"location":"monitoring-and-insights/observability-overview/","title":"Observability Overview","text":"<p>The Devant observability dashboard provides a comprehensive interface to visualize and monitor the performance of services deployed on Devant.</p> <p></p> <p>The Observability dashboard allows you to:</p> <ul> <li>View runtime logs generated over a specific timeframe.</li> <li>Observe the throughput and latencies of requests served over a given period.</li> <li>Observe the CPU and memory usage over a given period.</li> <li>Compare metrics side-by-side to facilitate efficient diagnosis.</li> </ul>"},{"location":"monitoring-and-insights/observability-overview/#logs","title":"Logs","text":"<p>The Logs pane serves as a centralized view to observe logs of the integrations you deploy on Devant. This facilitates rigorous troubleshooting and analysis.</p> <p></p>"},{"location":"monitoring-and-insights/observability-overview/#metrics","title":"Metrics","text":"<p>The Metrics pane provides a graphical representation of the following metrics:</p> <ul> <li>Request per minute</li> <li>Latency</li> <li>Memory usage</li> <li>CPU usage</li> <li>Data transfer</li> <li>Disk usage</li> </ul> <p></p> <p>By default, Devant renders this graph for the data generated within the past 24 hours. You can change the default time window by selecting the time range and zone from the options bar. To expand the graph, click and drag the cursor over the period you want to drill down.</p> <p>You can view the Devant service logs in the Runtime Logs pane below the metrics. Clicking on a graph updates the Runtime Logs view to contain the corresponding log entries generated at that time. You can use these logs to identify the reasons for any anomalies you detect using the graph.</p>"},{"location":"quick-start-guides/deploy-your-first-event-handler/","title":"Deploy Your First Event Integration","text":"<p>An event handle executes predefined actions in response to specific events. Devant simplifies the process of creating and deploying such integrations.</p> <p>This guide walks you through the steps to create and deploy an event integration using WSO2 Integrator:BI and Devant.</p> <p>In this guide, you will build a simple event integration that monitors RabbitMQ for new messages and displays them once they become available.</p>"},{"location":"quick-start-guides/deploy-your-first-event-handler/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub account: Create a GitHub account if you don't have one already.</li> <li>If signing in to Devant for the first time, create an organization to begin with.</li> <li>VS Code: Install VS Code if you don't have it installed already.</li> <li>Set up RabbitMQ:<ul> <li>Use an existing RabbitMQ instance or start a new RabbitMQ instance on a server that can be accessed via the internet.</li> <li>Obtain the <code>host</code>, <code>port</code>, <code>username</code>, and <code>password</code> from the RabbitMQ instance.</li> </ul> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-event-handler/#step-1-create-the-new-integration","title":"Step 1: Create the new integration","text":"<ol> <li>Attach a new repository to beign your integration. Refer Attach a Repository for more details.</li> <li>Select the Technology as <code>WSO2 Integrator: BI</code>.</li> <li>Choose the Integration Type as <code>Event Integration</code> and click Create.</li> </ol> <p>This redirects you to the Create New Integration in VS Code page. </p>"},{"location":"quick-start-guides/deploy-your-first-event-handler/#step-2-install-the-wso2-integrator-bi-extension-and-open-the-integration","title":"Step 2: Install the WSO2 Integrator: BI extension and open the integration","text":"<ol> <li>Intall WSO2 Integrator: BI extension. Refer Install and Set Up WSO2 Integrator: BI for more details.</li> <li>Click Develop in WSO2 Integrator: BI. This will clone your integration project and open it in BI.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-event-handler/#step-3-develop-event-integration-in-wso2-integrator-bi","title":"Step 3: Develop Event Integration in WSO2 Integrator: BI","text":"<ol> <li> <p>From the left side panel, click + on the Configurations, and add the following configurables.</p> Configurable Type <code>host</code> <code>string</code> <code>port</code> <code>int</code> <code>username</code> <code>string</code> <code>password</code> <code>string</code> <p></p> </li> <li> <p>Go to the Design View by clicking the Home icon on the top left corner and click Add Artifact.</p> </li> <li>Select RabbitMQ Event Handler. Choosing the Event Integration from the Devant console disables the other options.</li> <li>Provide the name of the RabbitMQ Configuration as <code>eventListener</code>.</li> <li>Select previously defined <code>host</code> and <code>port</code> configuration variables for the Host and Port.</li> <li> <p>Then, expand the Advanced Configurations and enter the following configurables. Then click Next.</p> Field Value username <code>username</code> password <code>password</code> </li> <li> <p>Add <code>Orders</code> as the Queue Name and click Create. If there is no queue named <code>Orders</code> in RabbitMQ server, this will create a new queue with this name. </p> <p></p> </li> <li> <p>In the Design view, click the <code>onMessage</code> function box. It will redirect you to the flow diagram view.</p> </li> <li>Click the plus icon after the Start node to open the node panel.</li> <li> <p>Add a Log Info node with the Msg as <code>message.toString()</code>. </p> <p></p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-event-handler/#step-4-push-to-devant","title":"Step 4: Push to Devant","text":"<ol> <li>Click the Source Control icon on the sidebar.</li> <li>Click + to stage all changes.</li> <li>Add an appropriate commit message and commit.</li> <li>Click Sync Changes to push the changes to remote.</li> <li>Go back to the Design view using the back arrow in the top left corner.</li> <li>From the right side panel, click the View in Devant to view this integration in Devant.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-event-handler/#step-5-test-the-integration","title":"Step 5: Test the integration","text":"<ol> <li> <p>Once you push the changes, the overview page of the Devant File Integration will automatically refresh and show you the Latest Commit and automatically build and show the Build Status.</p> <p>Note</p> <p>The build process may take some time. Once complete, the build status changes to Success. You can see the Build History by clicking Build in the left navigation.</p> </li> <li> <p>Once the Build Status shows <code>Build completed</code>, click on <code>Configure to Continue</code> and details of RabbitMQ instance.</p> </li> <li> <p>Send a sales order message to the Orders on the RabbitMQ server. You can send a sample sales order message similar to the following:</p> <pre><code>{\n\"order_id\": \"12345\",\n\"customer_name\": \"John Doe\",\n\"product\": \"Widget\",\n\"quantity\": 10,\n\"total_amount\": 100.00\n}\n</code></pre> </li> <li> <p>Observe the logs:</p> <ul> <li>You can view the order message in the logs pane of the development card.</li> </ul> </li> <li> <p>After successfully testing, you can promote your event integration to production by clicking the Promote button.</p> </li> </ol> <p>Now you have gained hands-on experience in creating, configuring, deploying, and testing an event integration.</p>"},{"location":"quick-start-guides/deploy-your-first-file-integration/","title":"Deploy Your First File Integration","text":""},{"location":"quick-start-guides/deploy-your-first-file-integration/#overview","title":"Overview","text":"<p>In this guide, you will:</p> <ul> <li>Create an FTP listener that fetches recent weather data.</li> <li>Use WSO2 Integrator: BI to develop the File integration.</li> <li>Push the File Integration to Devant from WSO2 Integrator: BI, which will automatically build and deploy it into the development environment.</li> <li>Test the File Integration.</li> <li>Promote it to the production environment and use it as an API.</li> </ul>"},{"location":"quick-start-guides/deploy-your-first-file-integration/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub account: Create a GitHub account if you don't have one already.</li> <li>If signing in to Devant for the first time, create an organization to begin with.</li> <li>VS Code: Install VS Code if you don't have it installed already.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-file-integration/#step-1-create-the-new-integration","title":"Step 1: Create the new integration","text":"<ol> <li>Attach a new repository to beign your integration. Refer Attach a Repository for more details.</li> <li>Select the Technology as <code>WSO2 Integrator: BI</code>.</li> <li>Choose the Integration Type as <code>File Integration</code> and click Create.</li> </ol> <p>This redirects you to the Create New Integration in VS Code page. </p>"},{"location":"quick-start-guides/deploy-your-first-file-integration/#step-2-install-the-wso2-integrator-bi-extension-and-open-the-integration","title":"Step 2: Install the WSO2 Integrator: BI extension and open the integration","text":"<ol> <li>Intall WSO2 Integrator: BI extension. Refer Install and Set Up WSO2 Integrator: BI for more details.</li> <li>Click Develop in WSO2 Integrator: BI. This will clone your integration project and open it in BI.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-file-integration/#step-3-develop-file-integration-in-wso2-integrator-bi","title":"Step 3: Develop File Integration in WSO2 Integrator: BI","text":"<ol> <li> <p>From the left side panel, click + on the Configurations, and add the following configurables.</p> Configurable Type <code>host</code> <code>string</code> <code>username</code> <code>string</code> <code>password</code> <code>string</code> <code>path</code> <code>string</code> <code>pattern</code> <code>string</code> <p></p> </li> <li> <p>Go to the Design View by clicking the Home icon on the top left corner and click Add Artifact.</p> </li> <li>Select FTP Service. Choosing the File Integration from the Devant console disables the other options.</li> <li>Provide the name of the Listener Configuration as <code>weatherListener</code>.</li> <li> <p>Then expand the Advanced Configurations and enter the following configurables:</p> Field Value Host <code>host</code> Auth <code>{ credentials: { username: username, password: password }}</code> Path <code>path</code> FileNamePattern <code>pattern</code> </li> <li> <p>Click Next, and you will see the created listener with the name <code>weatherListener</code>. </p> </li> <li> <p>Then click on Create. It will redirect you to the Service Designer view.</p> <p></p> </li> <li> <p>In the Design view, click the <code>onFileChange</code> function box. It will redirect you to the flow diagram view.</p> </li> <li>Click the plus icon after the Start node to open the node panel.</li> <li> <p>Select Foreach and enter the following values in relevant fields:</p> Field Value Variable Name <code>addFile</code> Variable Type <code>var</code> Collection <code>event.addedFiles</code> </li> <li> <p>Under the Foreach node, add a Log Info node with the Msg as <code>\"File added:\" + addedFiles.name</code>. </p> <p></p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-file-integration/#step-4-push-to-devant","title":"Step 4: Push to Devant","text":"<ol> <li>Click the Source Control icon on the sidebar.</li> <li>Click + to stage all changes.</li> <li>Add an appropriate commit message and commit.</li> <li>Click Sync Changes to push the changes to remote.</li> <li>Go back to the Design view using the back arrow in the top left corner.</li> <li>From the right side panel, click the View in Devant to view this integration in Devant.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-file-integration/#step-5-test-file-integration","title":"Step 5: Test File Integration","text":"<ol> <li> <p>Once you push the changes, the overview page of the Devant File Integration will automatically refresh and show you the Latest Commit and automatically build and show the Build Status.</p> <p>Note</p> <p>The build process may take some time. Once complete, the build status changes to Success. You can see the Build History by clicking Build in the left navigation.</p> </li> <li> <p>Once the Build Status shows <code>Build completed</code>, click on <code>Configure to Continue</code> and add the sample FTP service details.</p> Configurable Value <code>host</code> <code>tgftp.nws.noaa.gov</code> <code>username</code> <code>anonymous</code> <code>password</code> <code>\"\"</code> <code>path</code> <code>/data/observations/metar/decoded/</code> <code>pattern</code> <code>(.*).TXT</code> </li> <li> <p>Once the deployment is successful, you can view the logs printed by the weather listener in the development card.</p> </li> <li>After successfully testing, you can promote your File Integration to production by clicking the Promote button.</li> <li>Once deployed to production, you can access your File Integration through the API endpoints and embed it in your applications.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/","title":"Deploy Your First Integration as API","text":""},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#overview","title":"Overview","text":"<p>In this guide, you will:</p> <ul> <li>Create a simple Integration as an API that acts as a service that calls a third-party endpoint and returns its response to the client. </li> <li>The endpoint responds with a JSON, and the service deployed in Devant forwards this response to the client.</li> <li>Use WSO2 Integrator: BI to develop the API.</li> <li>Push the integration to Devant, which automatically builds and deploys the integration to the development environment.</li> <li>Test the integration.</li> </ul>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub account: Create a GitHub account if you don't have one already.</li> <li>If signing in to Devant for the first time, create an organization to begin with.</li> <li>VS Code: Install VS Code if you don't have it installed already.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#step-1-create-the-new-integration","title":"Step 1: Create the new integration","text":"<ol> <li>Attach a new repository to beign your integration. Refer Attach a Repository for more details.</li> <li>Select the Technology as <code>WSO2 Integrator: BI</code>.</li> <li>Choose the Integration Type as <code>Integration as API</code> and click Create.</li> </ol> <p>This redirects you to the Create New Integration in VS Code page. </p>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#step-2-install-the-wso2-integrator-bi-extension-and-open-the-integration","title":"Step 2: Install the WSO2 Integrator: BI extension and open the integration","text":"<ol> <li>Intall WSO2 Integrator: BI extension. Refer Install and Set Up WSO2 Integrator: BI for more details.</li> <li>Click Develop in WSO2 Integrator: BI. This will clone your integration project and open it in BI.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#step-3-develop-automation-in-wso2-integrator-bi","title":"Step 3: Develop automation in WSO2 Integrator: BI","text":"<p>Let\u2019s build an API that calls the https://dev-tools.wso2.com/gs/helpers/v1.0/countries endpoint and returns its response.</p> <ol> <li>In the WSO2 Integrator: BI Design View, select Add Artifact.</li> <li>Choose HTTP Service. Because Integration as API was selected in the Devant console, other artifact types are disabled.</li> <li>Enter <code>countries</code> as the Service base path, then select Create.</li> <li>Locate the <code>greeting</code> resource function and select the Edit button. Change the Resource path to <code>data</code>.</li> <li>Select the resource function to open it in the flow diagram view.</li> <li>In the flow diagram, select the + icon after the Start node to open the node panel.</li> <li>Choose + Add Connection, search for <code>HTTP</code>, and select it.</li> <li>In the configuration panel, enter the URL as <code>\"https://dev-tools.wso2.com/gs/helpers/v1.0/\"</code> and select Save.</li> <li>After saving, you\u2019ll see <code>httpClient</code> under Connections. Select <code>get</code> to invoke the endpoint.</li> <li> <p>Set the following values for <code>get</code> operation and click Save.</p> Field Value Variable name <code>response</code> Target Type <code>json</code> Path <code>\"/countries\"</code> </li> <li> <p>Select the + icon again, choose the Return node, select <code>response</code> as the return value, and select Save.</p> </li> </ol> <p> </p>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#step-4-push-to-devant","title":"Step 4: Push to Devant","text":"<ol> <li>Click the Source Control icon on the sidebar.</li> <li>Click + to stage all changes.</li> <li>Add an appropriate commit message and commit.</li> <li>Click Sync Changes to push the changes to remote.</li> <li>Go back to the Design view using the back arrow in the top left corner.</li> <li>From the right side panel, click the View in Devant to view this integration in Devant.</li> </ol>"},{"location":"quick-start-guides/deploy-your-first-integration-as-api/#step-5-test-the-api","title":"Step 5: Test the API","text":"<ol> <li> <p>After you push, Devant detects the commit, builds it, and deploys the integration to the development environment, showing the status on the overview page.</p> <p>Note</p> <p>The build process may take some time. Once complete, the build status changes to Success. You can see the Build History by clicking Build in the left navigation.</p> </li> <li> <p>Once the Build Status shows as <code>Build completed</code>, click Test on the development environment card. This will bring you to the Console page.</p> </li> <li>Click Get Test Key to get a key for testing.</li> <li>You will have a single resource available GET /. Click to expand the resource.</li> <li>Click Try it out.</li> <li>Click Execute. You will see the response from the backend service as a JSON.</li> <li>After successfully testing, you can promote your event integration to production by clicking the Promote button.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/","title":"Schedule Your First Automation","text":""},{"location":"quick-start-guides/schedule-your-first-automation/#overview","title":"Overview","text":"<p>In this guide, you will:</p> <ul> <li>Create a simple automation that prints <code>\"Hello World\"</code> every day.</li> <li>Use WSO2 Integrator: BI to develop the automation.</li> <li>Push the automation to Devant from the WSO2 Integrator: BI, which automatically builds the automation.</li> <li>Schedule the automation to run every day.</li> </ul>"},{"location":"quick-start-guides/schedule-your-first-automation/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub account: Create a GitHub account if you don't have one already.</li> <li>If signing in to Devant for the first time, create an organization to begin with.</li> <li>VS Code: Install VS Code if you don't have it installed already.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-1-create-the-new-integration","title":"Step 1: Create the new integration","text":"<ol> <li>Attach a new repository to beign your integration. Refer Attach a Repository for more details.</li> <li>Select the Technology as <code>WSO2 Integrator: BI</code>.</li> <li>Choose the Integration Type as <code>Automation</code> and click Create.</li> </ol> <p>This redirects you to the Create New Integration in VS Code page. </p>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-2-install-the-wso2-integrator-bi-extension-and-open-the-integration","title":"Step 2: Install the WSO2 Integrator: BI extension and open the integration","text":"<ol> <li>Intall WSO2 Integrator: BI extension. Refer Install and Set Up WSO2 Integrator: BI for more details.</li> <li>Click Develop in WSO2 Integrator: BI. This will clone your integration project and open it in BI.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-3-develop-automation-in-wso2-integrator-bi","title":"Step 3: Develop automation in WSO2 Integrator: BI","text":"<ol> <li>In WSO2 Integrator: BI design view, click Add Artifact.</li> <li>Select Automation from the Constructs menu. Since Automation is chosen from the Devant console, other options are disabled.</li> <li>Click Create to create an automation. This directs you to the automation diagram view.</li> <li>Click + after the Start node to open the node panel.</li> <li>Select Call Function and select println.</li> <li>Click + Add Another Value, type <code>\"Hello World\"</code> and click Save.</li> <li> <p>Click Run in the top right corner to run the automation. This compiles the automation and runs it in the embedded Ballerina runtime.</p> <p></p> </li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-4-push-to-devant","title":"Step 4: Push to Devant","text":"<ol> <li>Click the Source Control icon on the sidebar.</li> <li>Click + to stage all changes.</li> <li>Add an appropriate commit message and commit.</li> <li>Click Sync Changes to push the changes to remote.</li> </ol>"},{"location":"quick-start-guides/schedule-your-first-automation/#step-5-schedule-automation","title":"Step 5: Schedule Automation","text":"<ol> <li> <p>Once you push the changes, the overview page of the Devant automation will automatically refresh and show you the Latest Commit and automatically build your automation showing the Build Status.</p> <p>Note</p> <p>The build process may take some time. Once complete, the build status changes to Success. You can see the Build History by clicking Build in the left navigation.</p> </li> <li> <p>Once the Build Status shows <code>Build completed</code>, click Test to run your automation once.</p> </li> <li>The development card automatically updates with execution details. Click the refresh button in the top right corner if it is not automatically updated.</li> <li>Click View Logs on an execution. You will see the <code>Hello World</code> log printed along with the execution time.</li> <li>Click Schedule to schedule the automation.</li> <li>In the BY INTERVAL tab, select Day from the dropdown.</li> <li>Enter <code>1</code> in the Repeat every text box.</li> <li>Enter <code>01:00 AM</code> in the At text box and click Update.</li> <li> <p>Your automation will now run every day at 01:00 AM. You can see the next execution time as Next run in in the Development card.</p> <p></p> </li> <li> <p>After successfully testing, you can promote your automation to production by clicking the Promote button.</p> </li> </ol>"},{"location":"references/attach-a-repository/","title":"Attach a Repository","text":"<p>Once you\u2019ve logged into Devant Cosole, you\u2019ll land in the default project automatically created under your organization. Alternatively, you can choose to create a new project within the organization.</p> <p>Once you're inside the desired project, follow the steps below to start creating an integration by attaching a repository.</p> <p>The steps provided are for a GitHub repository, but you can follow a similar approach to authorize and connect with [Bitbucket]https://bitbucket.org/product) or GitLab.</p> <ol> <li> <p>On the Attach a Repository page, click Connect Now.</p> <p></p> </li> <li> <p>Click Authorize with GitHub to connect Devant to your GitHub account.</p> <p></p> <p>Tip</p> <p>If you're using a public Git repository, you can skip ahead to sub-step 8. Click Use a Third-Party Public Git Repository and enter the repository URL.</p> </li> <li> <p>If you haven't connected your GitHub repository to Devant, authorize the WSO2 cloud app with your GitHub account WSO2 Cloud App. Under the Organization dropdown, click + Add. This redirects you to the Install WSO2 Cloud App page.</p> </li> <li> <p>Select your GitHub account and install WSO2 Cloud App.</p> <p></p> <p>Note</p> <p>The WSO2 Cloud App requires:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access at any time. Write access is used to push changes directly to your repository.</p> </li> <li> <p>Select your organization under the Organization dropdown. If your organization is not listed, click the Refetch button.</p> </li> <li> <p>Select a repository to save your integration. You can either create a new repository or choose an existing one. You\u2019ll be prompted to authorize the WSO2 Cloud app for the selected repository to enable integration.</p> </li> <li> <p>Select a Branch and a Path of the selected repository to save your integration.</p> </li> <li> <p>The Name and Identifier fields are automatically populated. Optionally, you can edit them to your preference.</p> </li> </ol>"},{"location":"references/create-an-organization/","title":"Create an Organization","text":"<p>In Devant, an organization is a logical grouping of users and their associated resources. When signing in for the first time, a user must create an organization and become a member to begin using Devant. Refer Organization for more details. </p> <p>Users and resources within an organization are isolated from other organizations. Access to resources in another organization is only possible if an admin from that organization explicitly invites and adds the user as a member.</p>"},{"location":"references/create-an-organization/#step-1-log-in-to-devant","title":"Step 1: Log in to Devant","text":"<p>Go to Devant Console and sign in using your preferred sign-in option.</p>"},{"location":"references/create-an-organization/#step-2-define-a-name-for-the-organization","title":"Step 2: Define a name for the organization","text":"<p>Enter a unique organization name. </p> <ul> <li>Name should be between 4 and 30 characters.</li> <li>Must begin with a letter.</li> <li>Only consists of upper case, lower case, dash, space and underscore.</li> <li>Must be unique. </li> </ul> <p></p>"},{"location":"references/create-an-organization/#step-3-read-privacy-policy-and-terms-of-use","title":"Step 3: Read Privacy Policy and Terms of Use","text":"<p>Read and accept the Privacy Policy and Terms of Use and click Create.</p>"},{"location":"references/create-an-organization/#step-4-select-the-region","title":"Step 4: Select the region","text":"<p>Select the cloud region where you want to deploy your application and click Confirm.</p> <p></p> <p>Now, you are on the Overview page of the default project of the newly created organization. </p> <p></p>"},{"location":"references/devant-platform-services-billing-and-upgrades/","title":"Devant Platform Service Billing and Upgrades","text":"<p>Devant bills the platform services you create, such as databases, caches, or Kafka services, as part of your existing subscription. The cost depends on the service plan and the usage of each resource.</p>"},{"location":"references/devant-platform-services-billing-and-upgrades/#platform-service-billing-information","title":"Platform service billing information","text":"<ul> <li>Hourly billing: Usage is billed based on the number of hours a resource is active. For example, if you create a database, cache, or Kafka service and remove it within the same month, you pay only for the hours it was active.</li> <li>Fixed pricing: Pricing is based on the selected service plan. Devant does not charge extra for network bandwidth usage.</li> </ul>"},{"location":"references/devant-platform-services-billing-and-upgrades/#upgrade-a-service-plan","title":"Upgrade a service plan","text":"<p>If you want to upgrade the service plan of a platform service you have created, contact Devant support.</p>"},{"location":"references/install-and-setup-wso2-integrator-bi/","title":"Install and Set Up WSO2 Integrator: BI","text":"<p>WSO2 Integrator: BI is a low-code integration solution built on Ballerina, enabling fast and efficient integration development with minimal coding. It enables you to build integrations easily from your local development environment. This guide walks you through the steps to install and set up BI using Visual Studio Code (VS Code).</p>"},{"location":"references/install-and-setup-wso2-integrator-bi/#step-1-install-the-wso2-integrator-bi-extension","title":"Step 1: Install the WSO2 Integrator: BI Extension","text":"<ol> <li> <p>Once you start the integration creation in Devant by attaching a repository, you will be redirected to the Create New Integration in VS Code page.</p> <p></p> </li> <li> <p>If you don't have Visual Studio Code, click <code>Get VS Code</code> and install it. </p> </li> <li> <p>Then click Install WSO2 Integrator: BI extension. </p> </li> <li> <p>It will open the <code>WSO2 Integrator: BI</code> extension page and click Install. This will install both the <code>WSO2 Integrator: BI</code> and <code>Ballerina</code> extensions in VS Code.</p> <p></p> </li> </ol>"},{"location":"references/install-and-setup-wso2-integrator-bi/#step-2-set-up-wso2-integrator-bi-for-the-first-time","title":"Step 2: Set up WSO2 Integrator: BI for the first time","text":"<ol> <li> <p>Click the BI in the VS Code sidebar and click Set up Ballerina distribution. The setup wizard will automatically download and configure the required Ballerina distribution.</p> <p></p> </li> <li> <p>Once the setup is complete, click Restart VS Code to apply the changes.</p> <p></p> </li> </ol>"},{"location":"references/install-and-setup-wso2-integrator-bi/#step-3-develop-the-integration-in-wso2-integrator-bi","title":"Step 3: Develop the integration in WSO2 Integrator: BI","text":"<ol> <li> <p>Click Develop in WSO2 Integrator: BI. This will clone your integration project and open it in BI.</p> <p></p> </li> </ol>"},{"location":"references/signup-and-upgrade-guide/","title":"Sign-Up and Upgrade Guide","text":""},{"location":"references/signup-and-upgrade-guide/#sign-up-for-devant","title":"Sign up for Devant","text":"<p>This section explains how to sign up for Devant and start using the platform.</p> <ol> <li>Go to https://wso2.com/devant.</li> <li>Select Get started for free.</li> <li>Choose your preferred sign-up method.</li> <li>Follow the on-screen instructions to create your account and organization.</li> </ol> <p></p>"},{"location":"references/signup-and-upgrade-guide/#upgrade-to-the-pay-as-you-go-payg-tier","title":"Upgrade to the Pay-As-You-Go (PAYG) tier","text":"<p>This section explains how to upgrade from the free tier to the PAYG tier.</p> <ol> <li>Sign in to the Devant console: https://console.devant.dev</li> <li> <p>Select the Upgrade button in the top-right corner.</p> <p></p> </li> <li> <p>Choose the Pay-As-You-Go option by selecting the orange Choose Pay-As-You-Go button.</p> <p></p> </li> <li> <p>Decide whether you want to include Basic Support:</p> </li> <li>To include support, select Pick Support Plan.</li> <li> <p>To proceed without support, select Skip Support Plans.</p> <p></p> </li> <li> <p>Review your new subscription details and select Add payment method, enter the required details, and follow the on-screen instructions .</p> <p></p> </li> <li> <p>Complete the upgrade by</p> <ul> <li>checking the box for I agree to the terms of the payment.</li> <li>selecting Upgrade to Pay-As-You-Go Plan to complete the process.</li> </ul> </li> </ol> <p>You\u2019ll receive a confirmation email once your upgrade is complete.</p>"},{"location":"references/signup-and-upgrade-guide/#upgrade-to-the-enterprise-tier","title":"Upgrade to the Enterprise tier","text":"<p>This section explains how to upgrade from the free tier to the Enterprise tier.</p> <ol> <li>Contact WSO2 through one of the following:<ul> <li>Your assigned Account Manager or Technical Owner</li> <li>The WSO2 contact form</li> </ul> </li> <li>If you don\u2019t have an Account Manager, WSO2 will assign one to guide you through the contracting process.</li> <li>After your contract is finalized sign up for Devant if you haven\u2019t already.</li> <li>Share your Organization ID with your Account Manager or Technical Owner and WSO2 will complete the upgrade on your behalf.</li> </ol> Use shared service email<p>We recommend using a shared service email address to sign up and manage your Devant Organization.</p>"},{"location":"sharing-and-reusing/create-a-connection/","title":"Create a Connection","text":"<p>Using Connections, you can connect the integration with other APIs on Devant or external services. It also allows you to create connections to any Devant-managed database.</p> <p>To create a connection to an API or a database, follow the step-by-step instructions in the respective tab:</p> Create a connection to an APICreate a connection to a database <p>Create a connection to a Devant service</p> <p>Follow these steps to create a connection to an API deployed in Devant:</p> <ol> <li> <p>In the Devant Console, go to the top navigation menu and set the visibility level as project or integration as follows: </p> <ul> <li>Project Connection: Select an organization and a project in that organization. </li> <li>Integration Connection: Select an organization, a project in that organization, and an integration in the selected project. </li> </ul> </li> <li> <p>In the left navigation menu, click Admin and then Connections. This page lists all the existing connections.</p> </li> <li>Click the Services card and the resource page will open. You can search and apply filters to efficiently find a service.</li> <li>Click on the service you want to connect to. </li> <li>Enter a name and a description for the connection.</li> <li>Select an Access Mode and Authentication Scheme for the connection.</li> <li>Click Create.</li> </ol> <p>This creates the connection and displays its details for each environment, along with an inline guide on how to use the connection in your integration. </p> <p>Note</p> <p>During connection creation, secret values for the lowest environment are visible, allowing you to copy them for local use if necessary. Secret values for higher environments remain hidden to ensure security.</p> <p>Create a connection to an external service</p> <p>Follow these steps to create a connection to an external service:</p> <ol> <li>In the left navigation menu, click Admin and then Third Party Services. This page lists all the existing third-party services.</li> <li>Click +Register. This opens the Register a Third Party Service window.</li> <li>Enter the Name, Version, and Summary.</li> <li>Select a the Service Definition file to upload.</li> <li>Select a the Service Type from the dropdown.</li> <li>Click Define Endpoints.</li> <li>Add endpoints to your requirement and click Register.</li> </ol> <p>For step-by-step instructions on using a connection in your integration, see Use a Connection in Your Integration.</p> <p>Prerequisites:</p> <ul> <li>Create a Devant-managed database. For details, see Devant-Managed Databases and Caches.</li> <li>Add the database to the Marketplace. For details, see Add Devant-Managed Databases and Caches to the Marketplace.</li> </ul> <p>Follow these steps to create a connection to a Devant-managed database:</p> <ol> <li> <p>In the Devant Console, go to the top navigation menu and set the visibility level as project or integration as follows: </p> <ul> <li>Project Connection: Select an organization and a project in that organization. </li> <li>Integration Connection: Select an organization, a project in that organization, and an integration in the selected project. </li> </ul> </li> <li> <p>In the left navigation menu, click Dependencies  and then Connections. This page lists all the existing connections.</p> </li> <li>Click +Create. This opens the Marketplace view where you can browse and search for services or databases.</li> <li>Click the Databases tab. You can search and apply filters to efficiently find a database.</li> <li>Click on the database you want to connect to. </li> <li> <p>To create the connection, follow these steps:</p> <ol> <li>Enter a name and description.</li> <li> <p>Under Environment Configuration, select credentials for each environment.</p> <p>Note</p> <p>By default, the selected database is applied to all environments. To use different databases for specific environments, select the appropriate database and provide the corresponding credentials for each environment.</p> </li> <li> <p>Click Create.  </p> </li> </ol> </li> </ol> <p>This creates the connection and displays the database connection details for each environment, along with an inline guide on how to use the connection in your integration. </p> <p>Note</p> <p>During connection creation, secret values for the lowest environment are visible, allowing you to copy them for local use if necessary. Secret values for higher environments remain hidden to ensure security.</p> <p>For step-by-step instructions on using a database in your integration, see Use a Database Connection in Your integration.</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/","title":"Use a Connection in Your Service","text":"<p>Devant allows you to share and reuse your services, accelerating development and enhancing efficiency in building integrated applications through connections.</p> <p>For step-by-step on instruction on creating a connection, see Create a Connection.</p> <p>To learn more about Devant Connections, see the documentation on Connections.</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#consume-a-service-through-a-connection","title":"Consume a service through a connection","text":"<p>You can consume a Devant-deployed service within another service. Consuming connections from within Devant services is seamless and straightforward. Follow the steps below to consume a Devant service:</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-1-add-connection-configurations","title":"Step 1: Add connection configurations Step 2: Read configurations within the application  Step 2: Read configurations within the application","text":"<p>To integrate another service into your application, click the appropriate tab below based on your current configuration file and follow the step-by-step instructions:</p> Component.yaml file (v1.1)Component.yaml file (v1.0)Component-config.yaml file <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet: </p> <pre><code>dependencies:\nconnectionReferences:\n- name: &lt;CONNECTION_NAME&gt;\nresourceRef: &lt;RESOURCE_IDENTIFIER&gt;\n</code></pre> Field Description name The name given to the connection. resourceRef A unique, readable identifier of the service being connected to. </li> <li> <p>If you've previously added a <code>connectionReferences</code> section under <code>dependencies</code>, append this as another item under <code>connectionReferences</code>. Upon deploying the integration, Devant automatically creates a subscription if applicable and the necessary configurations to establish the connection will be injected into the Devant-defined environment variables.</p> <p>The following table details the Devant-defined environment variables:</p> Configuration Key Devant-Defined Environment Variable Name ServiceURL Devant_&lt;CONNECTION_NAME&gt;_SERVICEURL ConsumerKey Devant_&lt;CONNECTION_NAME&gt;_CONSUMERKEY ConsumerSecret Devant_&lt;CONNECTION_NAME&gt;_CONSUMERSECRET TokenURL Devant_&lt;CONNECTION_NAME&gt;_TOKENURL DevantAPIKey Devant_&lt;CONNECTION_NAME&gt;DevantAPIKEY <p>If you want to use custom environment variable names instead of the Devant-defined ones, you must define the environment configurations under the <code>configuration</code> section in the same file.   The following is a sample snippet: </p> <pre><code>configuration:\nenv:\n- name: HR_SERVICE_URL\nvalueFrom:\nconnectionRef:\nname: hr-connection\nkey: ServiceURL\n</code></pre> <p>The following table provides details on the configuration keys associated with the connection. These keys can be referenced as <code>env[i].valueFrom.connectionRef.key</code>.</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Devant service false false ConsumerKey string Consumer key of the Devant service false false ConsumerSecret string Consumer secret of the Devant service false true TokenURL string Token URL of the STS false false DevantAPIKey string API key of the Devant service false true <p>For more details, see the instructions under the component.yaml file (v1.1) tab.</p> </li> </ol> <p>Note</p> <p>This <code>component.yaml v1.0</code> is a legacy configuration format. For new projects, we recommend using the latest version (v1.1) of <code>component.yaml</code> for improved usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nserviceReferences:\n- name: &lt;SERVICE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: ServiceURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerSecret\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: TokenURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DevantAPIKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the service you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added a service reference section under <code>dependencies</code>, append this as another item under <code>serviceReferences</code>. </p> <p>Upon deploying the integration, Devant automatically creates a subscription if applicable and populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Devant service false false ConsumerKey string Consumer key of the Devant service false false ConsumerSecret string Consumer secret of the Devant service false true TokenURL string Token URL of the STS false false DevantAPIKey string API key of the Devant service false true </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.SVC_URL;\n</code></pre> <p>Note</p> <p>This <code>component-config.yaml</code> is a legacy configuration format. For new projects, we recommend using the latest version (v1.1) of <code>component.yaml</code> for improved usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component-config</code> file under the <code>spec</code> section.</p> <p>The following is a sample snippet:</p> <pre><code>outbound:\nserviceReferences:\n- name: &lt;SERVICE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: ServiceURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerSecret\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: TokenURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DevantAPIKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the service you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added an outbound service reference, append this as another item under <code>serviceReferences</code>. </p> <p>Upon deploying the integration, Devant automatically creates a subscription if applicable and populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Devant service false false ConsumerKey string Consumer key of the Devant service false false ConsumerSecret string Consumer secret of the Devant service false true TokenURL string Token URL of the STS false false DevantAPIKey string API key of the Devant service false true </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.SVC_URL;\n</code></pre> <p>If you're using the API key security scheme for the connection, skip Step 3 and follow the instructions in Step 4: API key security scheme tab.</p>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-2-read-configurations-within-the-application","title":"Step 2: Read configurations within the application","text":"<p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.Devant_&lt;CONNECTION_NAME&gt;_SERVICEURL;\n</code></pre>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-3-acquire-an-oauth-20-access-token","title":"Step 3: Acquire an OAuth 2.0 access token","text":"<p>To consume a Devant service with the visibility level set to organization or public and secured by the OAuth 2.0 security scheme, you must obtain an OAuth 2.0 token from the token endpoint. Subsequently, you can use the token to invoke the service.</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, you must pass the OAuth 2.0-related configurations such as client id, client secret and so on, obtained when creating the connection to your HTTP client configuration. The HTTP client autonomously manages token retrieval and refreshing.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, you must manually initiate a call to the token endpoint. This includes fetching the token and managing token expiration and refresh directly within your application code. The following is a sample curl command to obtain a token:</p> <pre><code>CONSUMER_KEY=\"your_consumer_key\"\nCONSUMER_SECRET=\"your_consumer_secret\"\nTOKEN_URL=\"your_token_url\"\n# Encode client credentials as Base64\nCLIENT_CREDENTIALS=$(echo -n \"$CLIENT_ID:$CLIENT_SECRET\" | base64)\ncurl -X POST $TOKEN_URL \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Basic $CLIENT_CREDENTIALS\" \\\n--data-urlencode \"grant_type=client_credentials\"\n</code></pre> </li> </ul>"},{"location":"sharing-and-reusing/use-a-connection-in-your-integration/#step-4-invoke-the-service","title":"Step 4: Invoke the service","text":"<p>Click the tab that matches the security scheme of your service and follow the instructions below:</p> API key security schemeOAuth 2.0 security scheme <p>To invoke the API, use the <code>Devant-api-key</code> header with the API key value retrieved from the corresponding environment variable as described in step 2.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>  const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Devant-API-Key': `${DevantApiKey}`\n}\n});\n</code></pre> <p>To invoke the service, use the following instructions based on your programming language:</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, use the service URL resolved in\u00a0Step\u00a02. The OAuth-aware client manages authentication automatically. For sample requests and responses, see the API definition provided via the Devant marketplace for the service.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, use the token obtained in step 3 to make calls to the dependent service. Subsequently, add the obtained token to the HTTP authorization header with the bearer prefix. As the service URL, use the URL resolved in step 2. For sample requests and responses, see the API definition of the service provided via the Devant marketplace.</p> </li> </ul> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Authorization': `Bearer ${accessToken}`\n'Devant-API-Key': `${DevantApiKey}`\n}\n});\n</code></pre> <p>Note</p> <p>If you want to consume a Devant service at the project visibility level, you don't need to obtain a token. You can directly invoke the service using the resolved URL.</p>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/","title":"Use a Database Connection in Your Integration","text":"<p>Devant allows you to share and reuse Devant-managed databases, accelerating development and enhancing efficiency in building integrated applications through connections.</p> <p>For step-by-step instructions on creating a database connection, see Create a Connection.</p> <p>To learn more about Devant Connections, see the documentation on Connections.</p>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#consume-a-database-through-a-connection","title":"Consume a database through a connection","text":"<p>To consume a Devant-managed database via a connection, follow these steps:</p>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#step-1-add-connection-configurations","title":"Step 1: Add connection configurations Step 2: Read configurations within the application  Step 2: Read configurations within the application","text":"<p>To integrate a database into your application, click the appropriate tab below based on your current configuration file and follow the step-by-step instructions:</p> Component.yaml file (v1.1)Component.yaml file (v1.0)Component-config.yaml file <ol> <li> <p>Copy and paste the snippet from the  developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nconnectionReferences:\n- name: &lt;CONNECTION_NAME&gt;\nresourceRef: &lt;RESOURCE_IDENTIFIER&gt;\n</code></pre> Field Description name The name given to the connection. resourceRef A unique, readable identifier of the database being connected to. </li> <li> <p>If you've previously added a <code>connectionReferences</code> section under <code>dependencies</code>, append this as another item under <code>connectionReferences</code>. Upon deploying the integration, the necessary configurations to establish the connection will be injected into Devant-defined environment variables.</p> <p>The following table details the Devant-defined environment variables:</p> Configuration Key Devant-Defined Environment Variable Name HostName DEVANT_&lt;CONNECTION_NAME&gt;_HOSTNAME Port DEVANT_&lt;CONNECTION_NAME&gt;_PORT Username DEVANT_&lt;CONNECTION_NAME&gt;_USERNAME Password DEVANT_&lt;CONNECTION_NAME&gt;_PASSWORD DatabaseName DEVANT_&lt;CONNECTION_NAME&gt;DATABASENAME <p>If you'd like to use custom environment variable names instead of the Devant-defined ones, add the dependency as a service reference under <code>dependencies</code> in the same file. For more details, refer to the instructions under the <code>component.yaml file (v1.0)</code> tab.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string Hostname of the database server false false Port string Port of the database server false false Username string Username of the database server false false Password string Password of the database server false true DatabaseName string Name of the database false false </li> </ol> <p>Note</p> <p>The <code>component.yaml v1.0</code> file is considered legacy. For new integrations, we recommend using the latest version, <code>component.yaml v1.1</code>, which offers enhanced usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the  developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nserviceReferences:\n- name: database:&lt;DATABASE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: HostName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Port\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Username\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Password\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DatabaseName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the database you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added a service reference section under <code>dependencies</code>, append this as another item under <code>serviceReferences</code>.</p> <p>Upon deploying the integration, Devant automatically populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string Hostname of the database server false false Port string Port of the database server false false Username string Username of the database server false false Password string Password of the database server false true DatabaseName string Name of the database false false </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const hostName = process.env.HOSTNAME;\n</code></pre> <p>Note</p> <p>The <code>component-config.yaml</code> file is considered legacy. For new integrations, we recommend using the latest version, <code>component.yaml v1.1</code>, which offers enhanced usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the  developer guide into the <code>component-config</code> file under the <code>spec</code> section.</p> <p>The following is a sample snippet:</p> <pre><code>outbound:\nserviceReferences:\n- name: database:&lt;DATABASE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: HostName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Port\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Username\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Password\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DatabaseName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the database you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Devant will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added an outbound service reference, append this as another item under <code>serviceReferences</code>.</p> <p>Upon deploying the integration, Devant automatically populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string Hostname of the database server false false Port string Port of the database server false false Username string Username of the database server false false Password string Password of the database server false true DatabaseName string Name of the database false false </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const hostName = process.env.HOSTNAME;\n</code></pre>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#step-2-read-configurations-within-the-application","title":"Step 2: Read configurations within the application","text":"<p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const hostName = process.env.DEVANT_&lt;CONNECTION_NAME&gt;_HOSTNAME;\n</code></pre>"},{"location":"sharing-and-reusing/use-a-database-connection-in-your-integration/#step-3-initiate-a-database-connection","title":"Step 3: Initiate a database connection","text":"<p>To initiate a connection to the database, follow these steps:</p> <p>In this example, you will connect to a MySQL database.</p> Step 3.1: Install the required packages <p>For the MySQL database, install the <code>mysql2</code> package using npm:</p> <pre><code>// Install the mysql2 package\nnpm install mysql2\n</code></pre> Step 3.2: Import required packages <pre><code>const client = require('mysql2')\n</code></pre> Step 3.3: Establish a connection <p>To establish the connection, use the environment variables for <code>hostName</code>, <code>username</code>, <code>password</code>, <code>databaseName</code>, and <code>port</code> as follows:</p> <pre><code>var connection = client.createConnection({\nhost: hostName,\nuser: username,\npassword: password,\ndatabase: databaseName,\nport: port\n});\nconnection.connect((err) =&gt; {\nif (err) {\nreturn;\n}\n// Connection is successful\n});\n</code></pre> <p>By following these steps, your integration can interact with the Devant-managed database seamlessly.</p>"},{"location":"testing/test-rest-endpoints-via-the-openapi-console/","title":"Test REST Endpoints via the OpenAPI Console","text":"<p>Devant provides an integrated OpenAPI Console for testing REST endpoints of your deployed integrations. Since Devant secures REST APIs with OAuth 2.0 authentication, the console automatically generates test keys to facilitate API testing.</p> <p>Follow these steps to test a REST endpoint using the OpenAPI Console:</p> <ol> <li>Go to the Devant Console and log in.</li> <li>Select the project.</li> <li>In the Integrations pane, click on the integration you want to test.</li> <li>On the desired environment card, click Test to open the OpenAPI Console.</li> <li> <p>In the OpenAPI Console pane, choose the endpoint you want to test from the Endpoint list.</p> <p>Note</p> <ul> <li>The Network Visibility of an endpoint is configured in the Configurations Drawer, which appears when you click <code>Configure</code> in a specific environment on the Integration Overview page. You can set the visibility to <code>Public</code>, <code>Organization</code>, or <code>Project</code>.</li> <li>If the Network Visibility is set to <code>Public</code>, skip to step 7.</li> <li>If the Network Visibility is set to <code>Organization</code>, the endpoint remains private. However, Devant lets you generate a temporary, publicly accessible test URL (secured with OAuth 2.0) for testing. This URL stays active for 15 minutes. To generate it, proceed to step 6.</li> </ul> </li> <li> <p>If required, click Generate URL to create a temporary test URL. This URL will be valid for 15 minutes and can be manually deactivated by clicking the Deactivate URL button.</p> <p></p> </li> <li> <p>Expand the resource you want to test.</p> </li> <li>Click Try it out to enable testing.</li> <li>Provide values for any parameters, if applicable.</li> <li> <p>Click Execute. The response will be displayed under the Responses section.</p> <p></p> </li> </ol>"}]}